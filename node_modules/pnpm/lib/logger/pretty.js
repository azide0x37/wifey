var chalk = require('chalk');

var observatory = require('observatory');
observatory.settings({ prefix: '  ', width: 74 });

/*
 * Logger.
 *
 *     add = logger()
 *
 *     log = add({ name: 'rimraf', rawSpec: 'rimraf@2.5.1' })
 *     log('resolved', pkgData)
 *     log('downloading')
 *     log('downloading', { done: 1, total: 200 })
 *     log('depnedencies')
 *     log('error', err)
 */

module.exports = function logger() {
  var tasks = {};

  function getTask(pkg) {
    if (tasks[pkg.rawSpec]) return tasks[pkg.rawSpec];
    var task = observatory.add((pkg.name ? pkg.name + ' ' : '') + chalk.gray(pkg.rawSpec || ''));
    task.status(chalk.gray('·'));
    tasks[pkg.rawSpec] = task;
    return task;
  }

  return function (pkg) {
    var pkgData; // package.json
    var res; // resolution

    // lazy get task
    function t() {
      return getTask(pkg);
    }

    // the first thing it (probably) does is wait in queue to query the npm registry
    return status;

    function status(status, args) {
      if (status === 'resolving') {
        t().status(chalk.yellow('finding ·'));
      } else if (status === 'resolved') {
        res = args;
      } else if (status === 'download-queued') {
        if (res.version) {
          t().status(chalk.gray('queued ' + res.version + ' ↓'));
        } else {
          t().status(chalk.gray('queued ↓'));
        }
      } else if (status === 'downloading' || status === 'download-start') {
        if (res.version) {
          t().status(chalk.yellow('downloading ' + res.version + ' ↓'));
        } else {
          t().status(chalk.yellow('downloading ↓'));
        }
        if (args && args.total && args.done < args.total) {
          t().details('' + Math.round(args.done / args.total * 100) + '%');
        } else {
          t().details('');
        }
      } else if (status === 'done') {
        if (pkgData) {
          t().status(chalk.green('' + pkgData.version + ' ✓')).details('');
        } else {
          t().status(chalk.green('OK ✓')).details('');
        }
      } else if (status === 'package.json') {
        pkgData = args;
      } else if (status === 'dependencies') {
        t().status(chalk.gray('' + pkgData.version + ' ·')).details('');
      } else if (status === 'error') {
        t().status(chalk.red('ERROR ✗')).details('');
      } else if (status === 'stdout') {
        observatory.add(chalk.blue(args.name) + '  ' + chalk.gray(args.line));
      } else if (status === 'stderr') {
        observatory.add(chalk.blue(args.name) + '! ' + chalk.gray(args.line));
      } else {
        t().status(status).details('');
      }
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vbG9nZ2VyL3ByZXR0eS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFFBQVEsUUFBUSxPQUFSLENBQVo7O0FBRUEsSUFBSSxjQUFjLFFBQVEsYUFBUixDQUFsQjtBQUNBLFlBQVksUUFBWixDQUFxQixFQUFFLFFBQVEsSUFBVixFQUFnQixPQUFPLEVBQXZCLEVBQXJCOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLE9BQVAsR0FBaUIsU0FBUyxNQUFULEdBQW1CO0FBQ2xDLE1BQUksUUFBUSxFQUFaOztBQUVBLFdBQVMsT0FBVCxDQUFrQixHQUFsQixFQUF1QjtBQUNyQixRQUFJLE1BQU0sSUFBSSxPQUFWLENBQUosRUFBd0IsT0FBTyxNQUFNLElBQUksT0FBVixDQUFQO0FBQ3hCLFFBQUksT0FBTyxZQUFZLEdBQVosQ0FDVCxDQUFDLElBQUksSUFBSixHQUFZLElBQUksSUFBSixHQUFXLEdBQXZCLEdBQThCLEVBQS9CLElBQ0EsTUFBTSxJQUFOLENBQVcsSUFBSSxPQUFKLElBQWUsRUFBMUIsQ0FGUyxDQUFYO0FBR0EsU0FBSyxNQUFMLENBQVksTUFBTSxJQUFOLENBQVcsR0FBWCxDQUFaO0FBQ0EsVUFBTSxJQUFJLE9BQVYsSUFBcUIsSUFBckI7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPLFVBQVUsR0FBVixFQUFlO0FBQ3BCLFFBQUksT0FBSixDO0FBQ0EsUUFBSSxHQUFKLEM7OztBQUdBLGFBQVMsQ0FBVCxHQUFjO0FBQ1osYUFBTyxRQUFRLEdBQVIsQ0FBUDtBQUNEOzs7QUFHRCxXQUFPLE1BQVA7O0FBRUEsYUFBUyxNQUFULENBQWlCLE1BQWpCLEVBQXlCLElBQXpCLEVBQStCO0FBQzdCLFVBQUksV0FBVyxXQUFmLEVBQTRCO0FBQzFCLFlBQUksTUFBSixDQUFXLE1BQU0sTUFBTixDQUFhLFdBQWIsQ0FBWDtBQUNELE9BRkQsTUFFTyxJQUFJLFdBQVcsVUFBZixFQUEyQjtBQUNoQyxjQUFNLElBQU47QUFDRCxPQUZNLE1BRUEsSUFBSSxXQUFXLGlCQUFmLEVBQWtDO0FBQ3ZDLFlBQUksSUFBSSxPQUFSLEVBQWlCO0FBQ2YsY0FBSSxNQUFKLENBQVcsTUFBTSxJQUFOLENBQVcsWUFBWSxJQUFJLE9BQWhCLEdBQTBCLElBQXJDLENBQVg7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJLE1BQUosQ0FBVyxNQUFNLElBQU4sQ0FBVyxVQUFYLENBQVg7QUFDRDtBQUNGLE9BTk0sTUFNQSxJQUFJLFdBQVcsYUFBWCxJQUE0QixXQUFXLGdCQUEzQyxFQUE2RDtBQUNsRSxZQUFJLElBQUksT0FBUixFQUFpQjtBQUNmLGNBQUksTUFBSixDQUFXLE1BQU0sTUFBTixDQUFhLGlCQUFpQixJQUFJLE9BQXJCLEdBQStCLElBQTVDLENBQVg7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJLE1BQUosQ0FBVyxNQUFNLE1BQU4sQ0FBYSxlQUFiLENBQVg7QUFDRDtBQUNELFlBQUksUUFBUSxLQUFLLEtBQWIsSUFBc0IsS0FBSyxJQUFMLEdBQVksS0FBSyxLQUEzQyxFQUFrRDtBQUNoRCxjQUFJLE9BQUosQ0FBWSxLQUFLLEtBQUssS0FBTCxDQUFXLEtBQUssSUFBTCxHQUFZLEtBQUssS0FBakIsR0FBeUIsR0FBcEMsQ0FBTCxHQUFnRCxHQUE1RDtBQUNELFNBRkQsTUFFTztBQUNMLGNBQUksT0FBSixDQUFZLEVBQVo7QUFDRDtBQUNGLE9BWE0sTUFXQSxJQUFJLFdBQVcsTUFBZixFQUF1QjtBQUM1QixZQUFJLE9BQUosRUFBYTtBQUNYLGNBQUksTUFBSixDQUFXLE1BQU0sS0FBTixDQUFZLEtBQUssUUFBUSxPQUFiLEdBQXVCLElBQW5DLENBQVgsRUFDRyxPQURILENBQ1csRUFEWDtBQUVELFNBSEQsTUFHTztBQUNMLGNBQUksTUFBSixDQUFXLE1BQU0sS0FBTixDQUFZLE1BQVosQ0FBWCxFQUNHLE9BREgsQ0FDVyxFQURYO0FBRUQ7QUFDRixPQVJNLE1BUUEsSUFBSSxXQUFXLGNBQWYsRUFBK0I7QUFDcEMsa0JBQVUsSUFBVjtBQUNELE9BRk0sTUFFQSxJQUFJLFdBQVcsY0FBZixFQUErQjtBQUNwQyxZQUFJLE1BQUosQ0FBVyxNQUFNLElBQU4sQ0FBVyxLQUFLLFFBQVEsT0FBYixHQUF1QixJQUFsQyxDQUFYLEVBQ0csT0FESCxDQUNXLEVBRFg7QUFFRCxPQUhNLE1BR0EsSUFBSSxXQUFXLE9BQWYsRUFBd0I7QUFDN0IsWUFBSSxNQUFKLENBQVcsTUFBTSxHQUFOLENBQVUsU0FBVixDQUFYLEVBQ0csT0FESCxDQUNXLEVBRFg7QUFFRCxPQUhNLE1BR0EsSUFBSSxXQUFXLFFBQWYsRUFBeUI7QUFDOUIsb0JBQVksR0FBWixDQUFnQixNQUFNLElBQU4sQ0FBVyxLQUFLLElBQWhCLElBQXdCLElBQXhCLEdBQStCLE1BQU0sSUFBTixDQUFXLEtBQUssSUFBaEIsQ0FBL0M7QUFDRCxPQUZNLE1BRUEsSUFBSSxXQUFXLFFBQWYsRUFBeUI7QUFDOUIsb0JBQVksR0FBWixDQUFnQixNQUFNLElBQU4sQ0FBVyxLQUFLLElBQWhCLElBQXdCLElBQXhCLEdBQStCLE1BQU0sSUFBTixDQUFXLEtBQUssSUFBaEIsQ0FBL0M7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJLE1BQUosQ0FBVyxNQUFYLEVBQ0csT0FESCxDQUNXLEVBRFg7QUFFRDtBQUNGO0FBQ0YsR0EzREQ7QUE0REQsQ0F6RUQiLCJmaWxlIjoicHJldHR5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuXG52YXIgb2JzZXJ2YXRvcnkgPSByZXF1aXJlKCdvYnNlcnZhdG9yeScpXG5vYnNlcnZhdG9yeS5zZXR0aW5ncyh7IHByZWZpeDogJyAgJywgd2lkdGg6IDc0IH0pXG5cbi8qXG4gKiBMb2dnZXIuXG4gKlxuICogICAgIGFkZCA9IGxvZ2dlcigpXG4gKlxuICogICAgIGxvZyA9IGFkZCh7IG5hbWU6ICdyaW1yYWYnLCByYXdTcGVjOiAncmltcmFmQDIuNS4xJyB9KVxuICogICAgIGxvZygncmVzb2x2ZWQnLCBwa2dEYXRhKVxuICogICAgIGxvZygnZG93bmxvYWRpbmcnKVxuICogICAgIGxvZygnZG93bmxvYWRpbmcnLCB7IGRvbmU6IDEsIHRvdGFsOiAyMDAgfSlcbiAqICAgICBsb2coJ2RlcG5lZGVuY2llcycpXG4gKiAgICAgbG9nKCdlcnJvcicsIGVycilcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxvZ2dlciAoKSB7XG4gIHZhciB0YXNrcyA9IHt9XG5cbiAgZnVuY3Rpb24gZ2V0VGFzayAocGtnKSB7XG4gICAgaWYgKHRhc2tzW3BrZy5yYXdTcGVjXSkgcmV0dXJuIHRhc2tzW3BrZy5yYXdTcGVjXVxuICAgIHZhciB0YXNrID0gb2JzZXJ2YXRvcnkuYWRkKFxuICAgICAgKHBrZy5uYW1lID8gKHBrZy5uYW1lICsgJyAnKSA6ICcnKSArXG4gICAgICBjaGFsay5ncmF5KHBrZy5yYXdTcGVjIHx8ICcnKSlcbiAgICB0YXNrLnN0YXR1cyhjaGFsay5ncmF5KCfCtycpKVxuICAgIHRhc2tzW3BrZy5yYXdTcGVjXSA9IHRhc2tcbiAgICByZXR1cm4gdGFza1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwa2cpIHtcbiAgICB2YXIgcGtnRGF0YSAvLyBwYWNrYWdlLmpzb25cbiAgICB2YXIgcmVzIC8vIHJlc29sdXRpb25cblxuICAgIC8vIGxhenkgZ2V0IHRhc2tcbiAgICBmdW5jdGlvbiB0ICgpIHtcbiAgICAgIHJldHVybiBnZXRUYXNrKHBrZylcbiAgICB9XG5cbiAgICAvLyB0aGUgZmlyc3QgdGhpbmcgaXQgKHByb2JhYmx5KSBkb2VzIGlzIHdhaXQgaW4gcXVldWUgdG8gcXVlcnkgdGhlIG5wbSByZWdpc3RyeVxuICAgIHJldHVybiBzdGF0dXNcblxuICAgIGZ1bmN0aW9uIHN0YXR1cyAoc3RhdHVzLCBhcmdzKSB7XG4gICAgICBpZiAoc3RhdHVzID09PSAncmVzb2x2aW5nJykge1xuICAgICAgICB0KCkuc3RhdHVzKGNoYWxrLnllbGxvdygnZmluZGluZyDCtycpKVxuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdyZXNvbHZlZCcpIHtcbiAgICAgICAgcmVzID0gYXJnc1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdkb3dubG9hZC1xdWV1ZWQnKSB7XG4gICAgICAgIGlmIChyZXMudmVyc2lvbikge1xuICAgICAgICAgIHQoKS5zdGF0dXMoY2hhbGsuZ3JheSgncXVldWVkICcgKyByZXMudmVyc2lvbiArICcg4oaTJykpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdCgpLnN0YXR1cyhjaGFsay5ncmF5KCdxdWV1ZWQg4oaTJykpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnZG93bmxvYWRpbmcnIHx8IHN0YXR1cyA9PT0gJ2Rvd25sb2FkLXN0YXJ0Jykge1xuICAgICAgICBpZiAocmVzLnZlcnNpb24pIHtcbiAgICAgICAgICB0KCkuc3RhdHVzKGNoYWxrLnllbGxvdygnZG93bmxvYWRpbmcgJyArIHJlcy52ZXJzaW9uICsgJyDihpMnKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0KCkuc3RhdHVzKGNoYWxrLnllbGxvdygnZG93bmxvYWRpbmcg4oaTJykpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MgJiYgYXJncy50b3RhbCAmJiBhcmdzLmRvbmUgPCBhcmdzLnRvdGFsKSB7XG4gICAgICAgICAgdCgpLmRldGFpbHMoJycgKyBNYXRoLnJvdW5kKGFyZ3MuZG9uZSAvIGFyZ3MudG90YWwgKiAxMDApICsgJyUnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQoKS5kZXRhaWxzKCcnKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ2RvbmUnKSB7XG4gICAgICAgIGlmIChwa2dEYXRhKSB7XG4gICAgICAgICAgdCgpLnN0YXR1cyhjaGFsay5ncmVlbignJyArIHBrZ0RhdGEudmVyc2lvbiArICcg4pyTJykpXG4gICAgICAgICAgICAuZGV0YWlscygnJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0KCkuc3RhdHVzKGNoYWxrLmdyZWVuKCdPSyDinJMnKSlcbiAgICAgICAgICAgIC5kZXRhaWxzKCcnKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ3BhY2thZ2UuanNvbicpIHtcbiAgICAgICAgcGtnRGF0YSA9IGFyZ3NcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnZGVwZW5kZW5jaWVzJykge1xuICAgICAgICB0KCkuc3RhdHVzKGNoYWxrLmdyYXkoJycgKyBwa2dEYXRhLnZlcnNpb24gKyAnIMK3JykpXG4gICAgICAgICAgLmRldGFpbHMoJycpXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICB0KCkuc3RhdHVzKGNoYWxrLnJlZCgnRVJST1Ig4pyXJykpXG4gICAgICAgICAgLmRldGFpbHMoJycpXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ3N0ZG91dCcpIHtcbiAgICAgICAgb2JzZXJ2YXRvcnkuYWRkKGNoYWxrLmJsdWUoYXJncy5uYW1lKSArICcgICcgKyBjaGFsay5ncmF5KGFyZ3MubGluZSkpXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ3N0ZGVycicpIHtcbiAgICAgICAgb2JzZXJ2YXRvcnkuYWRkKGNoYWxrLmJsdWUoYXJncy5uYW1lKSArICchICcgKyBjaGFsay5ncmF5KGFyZ3MubGluZSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0KCkuc3RhdHVzKHN0YXR1cylcbiAgICAgICAgICAuZGV0YWlscygnJylcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==