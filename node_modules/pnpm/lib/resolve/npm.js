var url = require('url');
var enc = global.encodeURIComponent;
var got = require('../got');
var registryUrl = require('registry-url');
var semver = require('semver');

/**
 * Resolves a package in the NPM registry. Done as part of `install()`.
 *
 *     var npa = require('npm-package-arg')
 *     resolve(npa('rimraf@2'))
 *       .then((res) => {
 *         res.fullname == 'rimraf@2.5.1'
 *         res.dist == {
 *           shasum: '0a1b2c...'
 *           tarball: 'http://...'
 *         }
 *       })
 */

module.exports = function resolveNpm(pkg, log) {
  // { raw: 'rimraf@2', scope: null, name: 'rimraf', rawSpec: '2' || '' }
  return Promise.resolve().then(function (_) {
    return toUri(pkg);
  }).then(function (url) {
    return got.get(url).then(function (res) {
      if (log) log('resolving');
      return res.promise;
    });
  }).then(function (res) {
    return JSON.parse(res.body);
  }).then(function (res) {
    return pickVersionFromRegistryDocument(res, pkg);
  }).then(function (res) {
    return {
      name: res.name,
      fullname: '' + res.name.replace('/', '!') + '@' + res.version,
      version: res.version, // used for displaying
      dist: res.dist
    };
  }).catch(function (err) {
    return errify(err, pkg);
  });
};

function errify(err, pkg) {
  if (err.statusCode === 404) {
    throw new Error("Module '" + pkg.raw + "' not found");
  }
  throw err;
}

function pickVersionFromRegistryDocument(pkg, dep) {
  var versions = Object.keys(pkg.versions);

  if (dep.type === 'tag') {
    var tagVersion = pkg['dist-tags'][dep.spec];
    if (pkg.versions[tagVersion]) {
      return pkg.versions[tagVersion];
    }
  } else {
    var maxVersion = semver.maxSatisfying(versions, dep.spec);
    if (maxVersion) {
      return pkg.versions[maxVersion];
    }
  }

  var message = versions.length ? 'Versions in registry:\n' + versions.join(', ') + '\n' : 'No valid version found.';
  var er = new Error('No compatible version found: ' + dep.raw + '\n' + message);
  throw er;
}

/**
 * Converts package data (from `npa()`) to a URI
 *
 *     toUri({ name: 'rimraf', rawSpec: '2' })
 *     // => 'https://registry.npmjs.org/rimraf/2'
 */

function toUri(pkg) {
  var name;

  if (pkg.name.substr(0, 1) === '@') {
    name = '@' + enc(pkg.name.substr(1));
  } else {
    name = enc(pkg.name);
  }

  return url.resolve(registryUrl(pkg.scope), name);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vcmVzb2x2ZS9ucG0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxNQUFNLFFBQVEsS0FBUixDQUFWO0FBQ0EsSUFBSSxNQUFNLE9BQU8sa0JBQWpCO0FBQ0EsSUFBSSxNQUFNLFFBQVEsUUFBUixDQUFWO0FBQ0EsSUFBSSxjQUFjLFFBQVEsY0FBUixDQUFsQjtBQUNBLElBQUksU0FBUyxRQUFRLFFBQVIsQ0FBYjs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSxPQUFPLE9BQVAsR0FBaUIsU0FBUyxVQUFULENBQXFCLEdBQXJCLEVBQTBCLEdBQTFCLEVBQStCOztBQUU5QyxTQUFPLFFBQVEsT0FBUixHQUNKLElBREksQ0FDQztBQUFBLFdBQUssTUFBTSxHQUFOLENBQUw7QUFBQSxHQURELEVBRUosSUFGSSxDQUVDO0FBQUEsV0FBTyxJQUFJLEdBQUosQ0FBUSxHQUFSLEVBQWEsSUFBYixDQUFrQixlQUFPO0FBQ3BDLFVBQUksR0FBSixFQUFTLElBQUksV0FBSjtBQUNULGFBQU8sSUFBSSxPQUFYO0FBQ0QsS0FIWSxDQUFQO0FBQUEsR0FGRCxFQU1KLElBTkksQ0FNQztBQUFBLFdBQU8sS0FBSyxLQUFMLENBQVcsSUFBSSxJQUFmLENBQVA7QUFBQSxHQU5ELEVBT0osSUFQSSxDQU9DO0FBQUEsV0FBTyxnQ0FBZ0MsR0FBaEMsRUFBcUMsR0FBckMsQ0FBUDtBQUFBLEdBUEQsRUFRSixJQVJJLENBUUM7QUFBQSxXQUFRO0FBQ1osWUFBTSxJQUFJLElBREU7QUFFWixnQkFBVSxLQUFLLElBQUksSUFBSixDQUFTLE9BQVQsQ0FBaUIsR0FBakIsRUFBc0IsR0FBdEIsQ0FBTCxHQUFrQyxHQUFsQyxHQUF3QyxJQUFJLE9BRjFDO0FBR1osZUFBUyxJQUFJLE9BSEQsRTtBQUlaLFlBQU0sSUFBSTtBQUpFLEtBQVI7QUFBQSxHQVJELEVBY0osS0FkSSxDQWNFO0FBQUEsV0FBTyxPQUFPLEdBQVAsRUFBWSxHQUFaLENBQVA7QUFBQSxHQWRGLENBQVA7QUFlRCxDQWpCRDs7QUFtQkEsU0FBUyxNQUFULENBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLEVBQTJCO0FBQ3pCLE1BQUksSUFBSSxVQUFKLEtBQW1CLEdBQXZCLEVBQTRCO0FBQzFCLFVBQU0sSUFBSSxLQUFKLENBQVUsYUFBYSxJQUFJLEdBQWpCLEdBQXVCLGFBQWpDLENBQU47QUFDRDtBQUNELFFBQU0sR0FBTjtBQUNEOztBQUVELFNBQVMsK0JBQVQsQ0FBMEMsR0FBMUMsRUFBK0MsR0FBL0MsRUFBb0Q7QUFDbEQsTUFBSSxXQUFXLE9BQU8sSUFBUCxDQUFZLElBQUksUUFBaEIsQ0FBZjs7QUFFQSxNQUFJLElBQUksSUFBSixLQUFhLEtBQWpCLEVBQXdCO0FBQ3RCLFFBQUksYUFBYSxJQUFJLFdBQUosRUFBaUIsSUFBSSxJQUFyQixDQUFqQjtBQUNBLFFBQUksSUFBSSxRQUFKLENBQWEsVUFBYixDQUFKLEVBQThCO0FBQzVCLGFBQU8sSUFBSSxRQUFKLENBQWEsVUFBYixDQUFQO0FBQ0Q7QUFDRixHQUxELE1BS087QUFDTCxRQUFJLGFBQWEsT0FBTyxhQUFQLENBQXFCLFFBQXJCLEVBQStCLElBQUksSUFBbkMsQ0FBakI7QUFDQSxRQUFJLFVBQUosRUFBZ0I7QUFDZCxhQUFPLElBQUksUUFBSixDQUFhLFVBQWIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsTUFBSSxVQUFVLFNBQVMsTUFBVCxHQUNBLDRCQUE0QixTQUFTLElBQVQsQ0FBYyxJQUFkLENBQTVCLEdBQWtELElBRGxELEdBRUEseUJBRmQ7QUFHQSxNQUFJLEtBQUssSUFBSSxLQUFKLENBQVUsa0NBQ0EsSUFBSSxHQURKLEdBQ1UsSUFEVixHQUNpQixPQUQzQixDQUFUO0FBRUEsUUFBTSxFQUFOO0FBQ0Q7Ozs7Ozs7OztBQVNELFNBQVMsS0FBVCxDQUFnQixHQUFoQixFQUFxQjtBQUNuQixNQUFJLElBQUo7O0FBRUEsTUFBSSxJQUFJLElBQUosQ0FBUyxNQUFULENBQWdCLENBQWhCLEVBQW1CLENBQW5CLE1BQTBCLEdBQTlCLEVBQW1DO0FBQ2pDLFdBQU8sTUFBTSxJQUFJLElBQUksSUFBSixDQUFTLE1BQVQsQ0FBZ0IsQ0FBaEIsQ0FBSixDQUFiO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBTyxJQUFJLElBQUksSUFBUixDQUFQO0FBQ0Q7O0FBRUQsU0FBTyxJQUFJLE9BQUosQ0FBWSxZQUFZLElBQUksS0FBaEIsQ0FBWixFQUFvQyxJQUFwQyxDQUFQO0FBQ0QiLCJmaWxlIjoibnBtLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG52YXIgZW5jID0gZ2xvYmFsLmVuY29kZVVSSUNvbXBvbmVudFxudmFyIGdvdCA9IHJlcXVpcmUoJy4uL2dvdCcpXG52YXIgcmVnaXN0cnlVcmwgPSByZXF1aXJlKCdyZWdpc3RyeS11cmwnKVxudmFyIHNlbXZlciA9IHJlcXVpcmUoJ3NlbXZlcicpXG5cbi8qKlxuICogUmVzb2x2ZXMgYSBwYWNrYWdlIGluIHRoZSBOUE0gcmVnaXN0cnkuIERvbmUgYXMgcGFydCBvZiBgaW5zdGFsbCgpYC5cbiAqXG4gKiAgICAgdmFyIG5wYSA9IHJlcXVpcmUoJ25wbS1wYWNrYWdlLWFyZycpXG4gKiAgICAgcmVzb2x2ZShucGEoJ3JpbXJhZkAyJykpXG4gKiAgICAgICAudGhlbigocmVzKSA9PiB7XG4gKiAgICAgICAgIHJlcy5mdWxsbmFtZSA9PSAncmltcmFmQDIuNS4xJ1xuICogICAgICAgICByZXMuZGlzdCA9PSB7XG4gKiAgICAgICAgICAgc2hhc3VtOiAnMGExYjJjLi4uJ1xuICogICAgICAgICAgIHRhcmJhbGw6ICdodHRwOi8vLi4uJ1xuICogICAgICAgICB9XG4gKiAgICAgICB9KVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVzb2x2ZU5wbSAocGtnLCBsb2cpIHtcbiAgLy8geyByYXc6ICdyaW1yYWZAMicsIHNjb3BlOiBudWxsLCBuYW1lOiAncmltcmFmJywgcmF3U3BlYzogJzInIHx8ICcnIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgLnRoZW4oXyA9PiB0b1VyaShwa2cpKVxuICAgIC50aGVuKHVybCA9PiBnb3QuZ2V0KHVybCkudGhlbihyZXMgPT4ge1xuICAgICAgaWYgKGxvZykgbG9nKCdyZXNvbHZpbmcnKVxuICAgICAgcmV0dXJuIHJlcy5wcm9taXNlXG4gICAgfSkpXG4gICAgLnRoZW4ocmVzID0+IEpTT04ucGFyc2UocmVzLmJvZHkpKVxuICAgIC50aGVuKHJlcyA9PiBwaWNrVmVyc2lvbkZyb21SZWdpc3RyeURvY3VtZW50KHJlcywgcGtnKSlcbiAgICAudGhlbihyZXMgPT4gKHtcbiAgICAgIG5hbWU6IHJlcy5uYW1lLFxuICAgICAgZnVsbG5hbWU6ICcnICsgcmVzLm5hbWUucmVwbGFjZSgnLycsICchJykgKyAnQCcgKyByZXMudmVyc2lvbixcbiAgICAgIHZlcnNpb246IHJlcy52ZXJzaW9uLCAvLyB1c2VkIGZvciBkaXNwbGF5aW5nXG4gICAgICBkaXN0OiByZXMuZGlzdFxuICAgIH0pKVxuICAgIC5jYXRjaChlcnIgPT4gZXJyaWZ5KGVyciwgcGtnKSlcbn1cblxuZnVuY3Rpb24gZXJyaWZ5IChlcnIsIHBrZykge1xuICBpZiAoZXJyLnN0YXR1c0NvZGUgPT09IDQwNCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1vZHVsZSAnXCIgKyBwa2cucmF3ICsgXCInIG5vdCBmb3VuZFwiKVxuICB9XG4gIHRocm93IGVyclxufVxuXG5mdW5jdGlvbiBwaWNrVmVyc2lvbkZyb21SZWdpc3RyeURvY3VtZW50IChwa2csIGRlcCkge1xuICB2YXIgdmVyc2lvbnMgPSBPYmplY3Qua2V5cyhwa2cudmVyc2lvbnMpXG5cbiAgaWYgKGRlcC50eXBlID09PSAndGFnJykge1xuICAgIHZhciB0YWdWZXJzaW9uID0gcGtnWydkaXN0LXRhZ3MnXVtkZXAuc3BlY11cbiAgICBpZiAocGtnLnZlcnNpb25zW3RhZ1ZlcnNpb25dKSB7XG4gICAgICByZXR1cm4gcGtnLnZlcnNpb25zW3RhZ1ZlcnNpb25dXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBtYXhWZXJzaW9uID0gc2VtdmVyLm1heFNhdGlzZnlpbmcodmVyc2lvbnMsIGRlcC5zcGVjKVxuICAgIGlmIChtYXhWZXJzaW9uKSB7XG4gICAgICByZXR1cm4gcGtnLnZlcnNpb25zW21heFZlcnNpb25dXG4gICAgfVxuICB9XG5cbiAgdmFyIG1lc3NhZ2UgPSB2ZXJzaW9ucy5sZW5ndGhcbiAgICAgICAgICAgICAgPyAnVmVyc2lvbnMgaW4gcmVnaXN0cnk6XFxuJyArIHZlcnNpb25zLmpvaW4oJywgJykgKyAnXFxuJ1xuICAgICAgICAgICAgICA6ICdObyB2YWxpZCB2ZXJzaW9uIGZvdW5kLidcbiAgdmFyIGVyID0gbmV3IEVycm9yKCdObyBjb21wYXRpYmxlIHZlcnNpb24gZm91bmQ6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgZGVwLnJhdyArICdcXG4nICsgbWVzc2FnZSlcbiAgdGhyb3cgZXJcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBwYWNrYWdlIGRhdGEgKGZyb20gYG5wYSgpYCkgdG8gYSBVUklcbiAqXG4gKiAgICAgdG9VcmkoeyBuYW1lOiAncmltcmFmJywgcmF3U3BlYzogJzInIH0pXG4gKiAgICAgLy8gPT4gJ2h0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnL3JpbXJhZi8yJ1xuICovXG5cbmZ1bmN0aW9uIHRvVXJpIChwa2cpIHtcbiAgdmFyIG5hbWVcblxuICBpZiAocGtnLm5hbWUuc3Vic3RyKDAsIDEpID09PSAnQCcpIHtcbiAgICBuYW1lID0gJ0AnICsgZW5jKHBrZy5uYW1lLnN1YnN0cigxKSlcbiAgfSBlbHNlIHtcbiAgICBuYW1lID0gZW5jKHBrZy5uYW1lKVxuICB9XG5cbiAgcmV0dXJuIHVybC5yZXNvbHZlKHJlZ2lzdHJ5VXJsKHBrZy5zY29wZSksIG5hbWUpXG59XG4iXX0=