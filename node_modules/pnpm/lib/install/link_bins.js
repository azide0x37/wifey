var join = require('path').join;
var relSymlink = require('../fs/rel_symlink');
var fs = require('mz/fs');
var mkdirp = require('../fs/mkdirp');
var debug = require('debug')('pnpm:link_bins');
var requireJson = require('../fs/require_json');

/*
 * Links executables into `node_modules/.bin`.
 *
 * - `modules` (String) - the node_modlules path
 * - `target` (String) - where the module is now; read package.json from here
 * - `fullname` (String) - fullname of the module (`rimraf@2.5.1`)
 *
 *     module = 'project/node_modules'
 *     target = 'project/node_modules/.tmp/a1b3c56...'
 *     finalTarget = 'project/node_modules/.store/rimraf@2.5.1'
 *     linkBins(module, target, finalTarget)
 *
 *     // node_modules/.bin/rimraf -> ../.store/rimraf@2.5.1/cmd.js
 */

module.exports = function linkBins(modules, target, finalTarget) {
  var pkg = tryRequire(join(target, 'package.json'));
  if (!pkg || !pkg.bin) return;

  var bins = binify(pkg);

  return Object.keys(bins).map(function (bin) {
    var actualBin = bins[bin];

    return Promise.resolve().then(function (_) {
      return fs.chmod(join(target, actualBin), 493);
    }).then(function (_) {
      return mkdirp(join(modules, '.bin'));
    }).then(function (_) {
      return debug('linking %s -> %s', join(finalTarget, actualBin), join(modules, '.bin', bin));
    }).then(function (_) {
      return relSymlink(join(finalTarget, actualBin), join(modules, '.bin', bin));
    });
  });
};

/*
 * Like `require()`, but returns `undefined` when it fails
 */

function tryRequire(path) {
  try {
    return requireJson(path);
  } catch (e) {}
}

/*
 * Returns bins for a package in a standard object format. This normalizes
 * between npm's string and object formats.
 *
 *    binify({ name: 'rimraf', bin: 'cmd.js' })
 *    => { rimraf: 'cmd.js' }
 *
 *    binify({ name: 'rmrf', bin: { rmrf: 'cmd.js' } })
 *    => { rmrf: 'cmd.js' }
 */

function binify(pkg) {
  if (typeof pkg.bin === 'string') {
    var obj = {};
    obj[pkg.name] = pkg.bin;
    return obj;
  }

  return pkg.bin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vaW5zdGFsbC9saW5rX2JpbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxPQUFPLFFBQVEsTUFBUixFQUFnQixJQUEzQjtBQUNBLElBQUksYUFBYSxRQUFRLG1CQUFSLENBQWpCO0FBQ0EsSUFBSSxLQUFLLFFBQVEsT0FBUixDQUFUO0FBQ0EsSUFBSSxTQUFTLFFBQVEsY0FBUixDQUFiO0FBQ0EsSUFBSSxRQUFRLFFBQVEsT0FBUixFQUFpQixnQkFBakIsQ0FBWjtBQUNBLElBQUksY0FBYyxRQUFRLG9CQUFSLENBQWxCOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLE9BQVAsR0FBaUIsU0FBUyxRQUFULENBQW1CLE9BQW5CLEVBQTRCLE1BQTVCLEVBQW9DLFdBQXBDLEVBQWlEO0FBQ2hFLE1BQUksTUFBTSxXQUFXLEtBQUssTUFBTCxFQUFhLGNBQWIsQ0FBWCxDQUFWO0FBQ0EsTUFBSSxDQUFDLEdBQUQsSUFBUSxDQUFDLElBQUksR0FBakIsRUFBc0I7O0FBRXRCLE1BQUksT0FBTyxPQUFPLEdBQVAsQ0FBWDs7QUFFQSxTQUFPLE9BQU8sSUFBUCxDQUFZLElBQVosRUFBa0IsR0FBbEIsQ0FBc0IsZUFBTztBQUNsQyxRQUFJLFlBQVksS0FBSyxHQUFMLENBQWhCOztBQUVBLFdBQU8sUUFBUSxPQUFSLEdBQ0osSUFESSxDQUNDO0FBQUEsYUFBSyxHQUFHLEtBQUgsQ0FBUyxLQUFLLE1BQUwsRUFBYSxTQUFiLENBQVQsRUFBa0MsR0FBbEMsQ0FBTDtBQUFBLEtBREQsRUFFSixJQUZJLENBRUM7QUFBQSxhQUFLLE9BQU8sS0FBSyxPQUFMLEVBQWMsTUFBZCxDQUFQLENBQUw7QUFBQSxLQUZELEVBR0osSUFISSxDQUdDO0FBQUEsYUFBSyxNQUFNLGtCQUFOLEVBQ1QsS0FBSyxXQUFMLEVBQWtCLFNBQWxCLENBRFMsRUFFVCxLQUFLLE9BQUwsRUFBYyxNQUFkLEVBQXNCLEdBQXRCLENBRlMsQ0FBTDtBQUFBLEtBSEQsRUFNSixJQU5JLENBTUM7QUFBQSxhQUFLLFdBQ1QsS0FBSyxXQUFMLEVBQWtCLFNBQWxCLENBRFMsRUFFVCxLQUFLLE9BQUwsRUFBYyxNQUFkLEVBQXNCLEdBQXRCLENBRlMsQ0FBTDtBQUFBLEtBTkQsQ0FBUDtBQVNELEdBWk0sQ0FBUDtBQWFELENBbkJEOzs7Ozs7QUF5QkEsU0FBUyxVQUFULENBQXFCLElBQXJCLEVBQTJCO0FBQ3pCLE1BQUk7QUFBRSxXQUFPLFlBQVksSUFBWixDQUFQO0FBQTBCLEdBQWhDLENBQWlDLE9BQU8sQ0FBUCxFQUFVLENBQUc7QUFDL0M7Ozs7Ozs7Ozs7Ozs7QUFhRCxTQUFTLE1BQVQsQ0FBaUIsR0FBakIsRUFBc0I7QUFDcEIsTUFBSSxPQUFPLElBQUksR0FBWCxLQUFtQixRQUF2QixFQUFpQztBQUMvQixRQUFJLE1BQU0sRUFBVjtBQUNBLFFBQUksSUFBSSxJQUFSLElBQWdCLElBQUksR0FBcEI7QUFDQSxXQUFPLEdBQVA7QUFDRDs7QUFFRCxTQUFPLElBQUksR0FBWDtBQUNEIiwiZmlsZSI6ImxpbmtfYmlucy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBqb2luID0gcmVxdWlyZSgncGF0aCcpLmpvaW5cbnZhciByZWxTeW1saW5rID0gcmVxdWlyZSgnLi4vZnMvcmVsX3N5bWxpbmsnKVxudmFyIGZzID0gcmVxdWlyZSgnbXovZnMnKVxudmFyIG1rZGlycCA9IHJlcXVpcmUoJy4uL2ZzL21rZGlycCcpXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdwbnBtOmxpbmtfYmlucycpXG52YXIgcmVxdWlyZUpzb24gPSByZXF1aXJlKCcuLi9mcy9yZXF1aXJlX2pzb24nKVxuXG4vKlxuICogTGlua3MgZXhlY3V0YWJsZXMgaW50byBgbm9kZV9tb2R1bGVzLy5iaW5gLlxuICpcbiAqIC0gYG1vZHVsZXNgIChTdHJpbmcpIC0gdGhlIG5vZGVfbW9kbHVsZXMgcGF0aFxuICogLSBgdGFyZ2V0YCAoU3RyaW5nKSAtIHdoZXJlIHRoZSBtb2R1bGUgaXMgbm93OyByZWFkIHBhY2thZ2UuanNvbiBmcm9tIGhlcmVcbiAqIC0gYGZ1bGxuYW1lYCAoU3RyaW5nKSAtIGZ1bGxuYW1lIG9mIHRoZSBtb2R1bGUgKGByaW1yYWZAMi41LjFgKVxuICpcbiAqICAgICBtb2R1bGUgPSAncHJvamVjdC9ub2RlX21vZHVsZXMnXG4gKiAgICAgdGFyZ2V0ID0gJ3Byb2plY3Qvbm9kZV9tb2R1bGVzLy50bXAvYTFiM2M1Ni4uLidcbiAqICAgICBmaW5hbFRhcmdldCA9ICdwcm9qZWN0L25vZGVfbW9kdWxlcy8uc3RvcmUvcmltcmFmQDIuNS4xJ1xuICogICAgIGxpbmtCaW5zKG1vZHVsZSwgdGFyZ2V0LCBmaW5hbFRhcmdldClcbiAqXG4gKiAgICAgLy8gbm9kZV9tb2R1bGVzLy5iaW4vcmltcmFmIC0+IC4uLy5zdG9yZS9yaW1yYWZAMi41LjEvY21kLmpzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaW5rQmlucyAobW9kdWxlcywgdGFyZ2V0LCBmaW5hbFRhcmdldCkge1xuICB2YXIgcGtnID0gdHJ5UmVxdWlyZShqb2luKHRhcmdldCwgJ3BhY2thZ2UuanNvbicpKVxuICBpZiAoIXBrZyB8fCAhcGtnLmJpbikgcmV0dXJuXG5cbiAgdmFyIGJpbnMgPSBiaW5pZnkocGtnKVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhiaW5zKS5tYXAoYmluID0+IHtcbiAgICB2YXIgYWN0dWFsQmluID0gYmluc1tiaW5dXG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKF8gPT4gZnMuY2htb2Qoam9pbih0YXJnZXQsIGFjdHVhbEJpbiksIDBvNzU1KSlcbiAgICAgIC50aGVuKF8gPT4gbWtkaXJwKGpvaW4obW9kdWxlcywgJy5iaW4nKSkpXG4gICAgICAudGhlbihfID0+IGRlYnVnKCdsaW5raW5nICVzIC0+ICVzJyxcbiAgICAgICAgam9pbihmaW5hbFRhcmdldCwgYWN0dWFsQmluKSxcbiAgICAgICAgam9pbihtb2R1bGVzLCAnLmJpbicsIGJpbikpKVxuICAgICAgLnRoZW4oXyA9PiByZWxTeW1saW5rKFxuICAgICAgICBqb2luKGZpbmFsVGFyZ2V0LCBhY3R1YWxCaW4pLFxuICAgICAgICBqb2luKG1vZHVsZXMsICcuYmluJywgYmluKSkpXG4gIH0pXG59XG5cbi8qXG4gKiBMaWtlIGByZXF1aXJlKClgLCBidXQgcmV0dXJucyBgdW5kZWZpbmVkYCB3aGVuIGl0IGZhaWxzXG4gKi9cblxuZnVuY3Rpb24gdHJ5UmVxdWlyZSAocGF0aCkge1xuICB0cnkgeyByZXR1cm4gcmVxdWlyZUpzb24ocGF0aCkgfSBjYXRjaCAoZSkgeyB9XG59XG5cbi8qXG4gKiBSZXR1cm5zIGJpbnMgZm9yIGEgcGFja2FnZSBpbiBhIHN0YW5kYXJkIG9iamVjdCBmb3JtYXQuIFRoaXMgbm9ybWFsaXplc1xuICogYmV0d2VlbiBucG0ncyBzdHJpbmcgYW5kIG9iamVjdCBmb3JtYXRzLlxuICpcbiAqICAgIGJpbmlmeSh7IG5hbWU6ICdyaW1yYWYnLCBiaW46ICdjbWQuanMnIH0pXG4gKiAgICA9PiB7IHJpbXJhZjogJ2NtZC5qcycgfVxuICpcbiAqICAgIGJpbmlmeSh7IG5hbWU6ICdybXJmJywgYmluOiB7IHJtcmY6ICdjbWQuanMnIH0gfSlcbiAqICAgID0+IHsgcm1yZjogJ2NtZC5qcycgfVxuICovXG5cbmZ1bmN0aW9uIGJpbmlmeSAocGtnKSB7XG4gIGlmICh0eXBlb2YgcGtnLmJpbiA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgb2JqID0ge31cbiAgICBvYmpbcGtnLm5hbWVdID0gcGtnLmJpblxuICAgIHJldHVybiBvYmpcbiAgfVxuXG4gIHJldHVybiBwa2cuYmluXG59XG4iXX0=