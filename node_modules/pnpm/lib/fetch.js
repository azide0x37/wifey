var debug = require('debug')('pnpm:fetch');
var got = require('./got');
var crypto = require('crypto');
var gunzip = require('gunzip-maybe');
var tar = require('tar-fs');

/*
 * Fetches a tarball `tarball` and extracts it into `dir`
 */

module.exports = function fetch(dir, tarball, shasum, log) {
  return got.getStream(tarball).then(function (stream) {
    return fetchStream(dir, tarball, shasum, log, stream);
  });
};

function fetchStream(dir, tarball, shasum, log, stream) {
  return new Promise(function (resolve, reject) {
    var actualShasum = crypto.createHash('sha1');
    var size;
    var downloaded = 0;

    stream.on('response', start).on('data', function (_) {
      actualShasum.update(_);
    }).on('error', reject).pipe(gunzip()).on('error', reject).pipe(tar.extract(dir, { strip: 1 })).on('error', reject).on('finish', finish);

    function start(res) {
      if (res.statusCode !== 200) {
        return reject(new Error('' + tarball + ': invalid response ' + res.statusCode));
      }

      log('download-start');
      if ('content-length' in res.headers) {
        size = +res.headers['content-length'];
        res.on('data', function (chunk) {
          downloaded += chunk.length;
          log('downloading', { done: downloaded, total: size });
        });
      }
    }

    function finish() {
      var digest = actualShasum.digest('hex');
      debug('finish %s %s', shasum, tarball);
      if (shasum && digest !== shasum) {
        return reject(new Error('' + tarball + ': incorrect shasum (expected ' + shasum + ', got ' + digest + ')'));
      }

      return resolve(dir);
    }
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYn4vZmV0Y2guanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxRQUFRLFFBQVEsT0FBUixFQUFpQixZQUFqQixDQUFaO0FBQ0EsSUFBSSxNQUFNLFFBQVEsT0FBUixDQUFWO0FBQ0EsSUFBSSxTQUFTLFFBQVEsUUFBUixDQUFiO0FBQ0EsSUFBSSxTQUFTLFFBQVEsY0FBUixDQUFiO0FBQ0EsSUFBSSxNQUFNLFFBQVEsUUFBUixDQUFWOzs7Ozs7QUFNQSxPQUFPLE9BQVAsR0FBaUIsU0FBUyxLQUFULENBQWdCLEdBQWhCLEVBQXFCLE9BQXJCLEVBQThCLE1BQTlCLEVBQXNDLEdBQXRDLEVBQTJDO0FBQzFELFNBQU8sSUFBSSxTQUFKLENBQWMsT0FBZCxFQUNKLElBREksQ0FDQztBQUFBLFdBQVUsWUFBWSxHQUFaLEVBQWlCLE9BQWpCLEVBQTBCLE1BQTFCLEVBQWtDLEdBQWxDLEVBQXVDLE1BQXZDLENBQVY7QUFBQSxHQURELENBQVA7QUFFRCxDQUhEOztBQUtBLFNBQVMsV0FBVCxDQUFzQixHQUF0QixFQUEyQixPQUEzQixFQUFvQyxNQUFwQyxFQUE0QyxHQUE1QyxFQUFpRCxNQUFqRCxFQUF5RDtBQUN2RCxTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBcUI7QUFDdEMsUUFBSSxlQUFlLE9BQU8sVUFBUCxDQUFrQixNQUFsQixDQUFuQjtBQUNBLFFBQUksSUFBSjtBQUNBLFFBQUksYUFBYSxDQUFqQjs7QUFFQSxXQUNHLEVBREgsQ0FDTSxVQUROLEVBQ2tCLEtBRGxCLEVBRUcsRUFGSCxDQUVNLE1BRk4sRUFFYyxhQUFLO0FBQUUsbUJBQWEsTUFBYixDQUFvQixDQUFwQjtBQUF3QixLQUY3QyxFQUdHLEVBSEgsQ0FHTSxPQUhOLEVBR2UsTUFIZixFQUlHLElBSkgsQ0FJUSxRQUpSLEVBSWtCLEVBSmxCLENBSXFCLE9BSnJCLEVBSThCLE1BSjlCLEVBS0csSUFMSCxDQUtRLElBQUksT0FBSixDQUFZLEdBQVosRUFBaUIsRUFBRSxPQUFPLENBQVQsRUFBakIsQ0FMUixFQUt3QyxFQUx4QyxDQUsyQyxPQUwzQyxFQUtvRCxNQUxwRCxFQU1HLEVBTkgsQ0FNTSxRQU5OLEVBTWdCLE1BTmhCOztBQVFBLGFBQVMsS0FBVCxDQUFnQixHQUFoQixFQUFxQjtBQUNuQixVQUFJLElBQUksVUFBSixLQUFtQixHQUF2QixFQUE0QjtBQUMxQixlQUFPLE9BQU8sSUFBSSxLQUFKLENBQVUsS0FBSyxPQUFMLEdBQWUscUJBQWYsR0FBdUMsSUFBSSxVQUFyRCxDQUFQLENBQVA7QUFDRDs7QUFFRCxVQUFJLGdCQUFKO0FBQ0EsVUFBSSxvQkFBb0IsSUFBSSxPQUE1QixFQUFxQztBQUNuQyxlQUFPLENBQUMsSUFBSSxPQUFKLENBQVksZ0JBQVosQ0FBUjtBQUNBLFlBQUksRUFBSixDQUFPLE1BQVAsRUFBZSxpQkFBUztBQUN0Qix3QkFBYyxNQUFNLE1BQXBCO0FBQ0EsY0FBSSxhQUFKLEVBQW1CLEVBQUUsTUFBTSxVQUFSLEVBQW9CLE9BQU8sSUFBM0IsRUFBbkI7QUFDRCxTQUhEO0FBSUQ7QUFDRjs7QUFFRCxhQUFTLE1BQVQsR0FBbUI7QUFDakIsVUFBSSxTQUFTLGFBQWEsTUFBYixDQUFvQixLQUFwQixDQUFiO0FBQ0EsWUFBTSxjQUFOLEVBQXNCLE1BQXRCLEVBQThCLE9BQTlCO0FBQ0EsVUFBSSxVQUFVLFdBQVcsTUFBekIsRUFBaUM7QUFDL0IsZUFBTyxPQUFPLElBQUksS0FBSixDQUFVLEtBQUssT0FBTCxHQUFlLCtCQUFmLEdBQWlELE1BQWpELEdBQTBELFFBQTFELEdBQXFFLE1BQXJFLEdBQThFLEdBQXhGLENBQVAsQ0FBUDtBQUNEOztBQUVELGFBQU8sUUFBUSxHQUFSLENBQVA7QUFDRDtBQUNGLEdBckNNLENBQVA7QUFzQ0QiLCJmaWxlIjoiZmV0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdwbnBtOmZldGNoJylcbnZhciBnb3QgPSByZXF1aXJlKCcuL2dvdCcpXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJylcbnZhciBndW56aXAgPSByZXF1aXJlKCdndW56aXAtbWF5YmUnKVxudmFyIHRhciA9IHJlcXVpcmUoJ3Rhci1mcycpXG5cbi8qXG4gKiBGZXRjaGVzIGEgdGFyYmFsbCBgdGFyYmFsbGAgYW5kIGV4dHJhY3RzIGl0IGludG8gYGRpcmBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZldGNoIChkaXIsIHRhcmJhbGwsIHNoYXN1bSwgbG9nKSB7XG4gIHJldHVybiBnb3QuZ2V0U3RyZWFtKHRhcmJhbGwpXG4gICAgLnRoZW4oc3RyZWFtID0+IGZldGNoU3RyZWFtKGRpciwgdGFyYmFsbCwgc2hhc3VtLCBsb2csIHN0cmVhbSkpXG59XG5cbmZ1bmN0aW9uIGZldGNoU3RyZWFtIChkaXIsIHRhcmJhbGwsIHNoYXN1bSwgbG9nLCBzdHJlYW0pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgYWN0dWFsU2hhc3VtID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgIHZhciBzaXplXG4gICAgdmFyIGRvd25sb2FkZWQgPSAwXG5cbiAgICBzdHJlYW1cbiAgICAgIC5vbigncmVzcG9uc2UnLCBzdGFydClcbiAgICAgIC5vbignZGF0YScsIF8gPT4geyBhY3R1YWxTaGFzdW0udXBkYXRlKF8pIH0pXG4gICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgLnBpcGUoZ3VuemlwKCkpLm9uKCdlcnJvcicsIHJlamVjdClcbiAgICAgIC5waXBlKHRhci5leHRyYWN0KGRpciwgeyBzdHJpcDogMSB9KSkub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgLm9uKCdmaW5pc2gnLCBmaW5pc2gpXG5cbiAgICBmdW5jdGlvbiBzdGFydCAocmVzKSB7XG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwMCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignJyArIHRhcmJhbGwgKyAnOiBpbnZhbGlkIHJlc3BvbnNlICcgKyByZXMuc3RhdHVzQ29kZSkpXG4gICAgICB9XG5cbiAgICAgIGxvZygnZG93bmxvYWQtc3RhcnQnKVxuICAgICAgaWYgKCdjb250ZW50LWxlbmd0aCcgaW4gcmVzLmhlYWRlcnMpIHtcbiAgICAgICAgc2l6ZSA9ICtyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXVxuICAgICAgICByZXMub24oJ2RhdGEnLCBjaHVuayA9PiB7XG4gICAgICAgICAgZG93bmxvYWRlZCArPSBjaHVuay5sZW5ndGhcbiAgICAgICAgICBsb2coJ2Rvd25sb2FkaW5nJywgeyBkb25lOiBkb3dubG9hZGVkLCB0b3RhbDogc2l6ZSB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmlzaCAoKSB7XG4gICAgICB2YXIgZGlnZXN0ID0gYWN0dWFsU2hhc3VtLmRpZ2VzdCgnaGV4JylcbiAgICAgIGRlYnVnKCdmaW5pc2ggJXMgJXMnLCBzaGFzdW0sIHRhcmJhbGwpXG4gICAgICBpZiAoc2hhc3VtICYmIGRpZ2VzdCAhPT0gc2hhc3VtKSB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCcnICsgdGFyYmFsbCArICc6IGluY29ycmVjdCBzaGFzdW0gKGV4cGVjdGVkICcgKyBzaGFzdW0gKyAnLCBnb3QgJyArIGRpZ2VzdCArICcpJykpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNvbHZlKGRpcilcbiAgICB9XG4gIH0pXG59XG4iXX0=