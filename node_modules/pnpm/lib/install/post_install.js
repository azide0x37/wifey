var Promise = require('../promise');
var join = require('path').join;
var dirname = require('path').dirname;
var spawn = require('child_process').spawn;
var debug = require('debug')('pnpm:post_install');
var delimiter = require('path').delimiter;
var byline = require('byline');
var fs = require('mz/fs');

module.exports = function postInstall(root_, pkg, log) {
  var root = join(root_, '_');
  debug('postinstall', pkg.name + '@' + pkg.version);
  var scripts = pkg && pkg.scripts || {};
  return Promise.resolve().then(function (_) {
    return !scripts.install && checkBindingGyp(root, log);
  }).then(function (_) {
    return runScript(root, scripts.preinstall, log);
  }).then(function (_) {
    return runScript(root, scripts.install, log);
  }).then(function (_) {
    return runScript(root, scripts.postinstall, log);
  });
};

/*
 * Run node-gyp when binding.gyp is available. Only do this when there's no
 * `install` script (see `npm help scripts`).
 */

function checkBindingGyp(root, log) {
  return fs.stat(join(root, 'binding.gyp')).then(function (_) {
    return runScript(root, 'node-gyp rebuild', log);
  }).catch(function (err) {
    if (err.code !== 'ENOENT') throw err;
  });
}

/*
 * Runs an npm script.
 */

function runScript(root, script, log) {
  if (script) debug('runscript', script);
  if (!script) return Promise.resolve();
  return new Promise(function (resolve, reject) {
    var env = Object.create(process.env);
    env.PATH = [join(root, 'node_modules', '.bin'), dirname(require.resolve('../../bin/node-gyp-bin/node-gyp')), process.env.PATH].join(delimiter);

    var proc = spawn('sh', ['-c', script], {
      cwd: root,
      env: env
    });

    log('stderr', '$ ' + script);

    proc.on('error', reject);
    byline(proc.stdout).on('data', function (line) {
      return log('stdout', line);
    });
    byline(proc.stderr).on('data', function (line) {
      return log('stderr', line);
    });

    proc.on('close', function (code) {
      if (code > 0) return reject(new Error('Exit code ' + code));
      return resolve();
    });
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vaW5zdGFsbC9wb3N0X2luc3RhbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxVQUFVLFFBQVEsWUFBUixDQUFkO0FBQ0EsSUFBSSxPQUFPLFFBQVEsTUFBUixFQUFnQixJQUEzQjtBQUNBLElBQUksVUFBVSxRQUFRLE1BQVIsRUFBZ0IsT0FBOUI7QUFDQSxJQUFJLFFBQVEsUUFBUSxlQUFSLEVBQXlCLEtBQXJDO0FBQ0EsSUFBSSxRQUFRLFFBQVEsT0FBUixFQUFpQixtQkFBakIsQ0FBWjtBQUNBLElBQUksWUFBWSxRQUFRLE1BQVIsRUFBZ0IsU0FBaEM7QUFDQSxJQUFJLFNBQVMsUUFBUSxRQUFSLENBQWI7QUFDQSxJQUFJLEtBQUssUUFBUSxPQUFSLENBQVQ7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLFNBQVMsV0FBVCxDQUFzQixLQUF0QixFQUE2QixHQUE3QixFQUFrQyxHQUFsQyxFQUF1QztBQUN0RCxNQUFJLE9BQU8sS0FBSyxLQUFMLEVBQVksR0FBWixDQUFYO0FBQ0EsUUFBTSxhQUFOLEVBQXFCLElBQUksSUFBSixHQUFXLEdBQVgsR0FBaUIsSUFBSSxPQUExQztBQUNBLE1BQUksVUFBVSxPQUFPLElBQUksT0FBWCxJQUFzQixFQUFwQztBQUNBLFNBQU8sUUFBUSxPQUFSLEdBQ0osSUFESSxDQUNDO0FBQUEsV0FBSyxDQUFDLFFBQVEsT0FBVCxJQUFvQixnQkFBZ0IsSUFBaEIsRUFBc0IsR0FBdEIsQ0FBekI7QUFBQSxHQURELEVBRUosSUFGSSxDQUVDO0FBQUEsV0FBSyxVQUFVLElBQVYsRUFBZ0IsUUFBUSxVQUF4QixFQUFvQyxHQUFwQyxDQUFMO0FBQUEsR0FGRCxFQUdKLElBSEksQ0FHQztBQUFBLFdBQUssVUFBVSxJQUFWLEVBQWdCLFFBQVEsT0FBeEIsRUFBaUMsR0FBakMsQ0FBTDtBQUFBLEdBSEQsRUFJSixJQUpJLENBSUM7QUFBQSxXQUFLLFVBQVUsSUFBVixFQUFnQixRQUFRLFdBQXhCLEVBQXFDLEdBQXJDLENBQUw7QUFBQSxHQUpELENBQVA7QUFLRCxDQVREOzs7Ozs7O0FBZ0JBLFNBQVMsZUFBVCxDQUEwQixJQUExQixFQUFnQyxHQUFoQyxFQUFxQztBQUNuQyxTQUFPLEdBQUcsSUFBSCxDQUFRLEtBQUssSUFBTCxFQUFXLGFBQVgsQ0FBUixFQUNOLElBRE0sQ0FDRDtBQUFBLFdBQUssVUFBVSxJQUFWLEVBQWdCLGtCQUFoQixFQUFvQyxHQUFwQyxDQUFMO0FBQUEsR0FEQyxFQUVOLEtBRk0sQ0FFQSxlQUFPO0FBQ1osUUFBSSxJQUFJLElBQUosS0FBYSxRQUFqQixFQUEyQixNQUFNLEdBQU47QUFDNUIsR0FKTSxDQUFQO0FBS0Q7Ozs7OztBQU1ELFNBQVMsU0FBVCxDQUFvQixJQUFwQixFQUEwQixNQUExQixFQUFrQyxHQUFsQyxFQUF1QztBQUNyQyxNQUFJLE1BQUosRUFBWSxNQUFNLFdBQU4sRUFBbUIsTUFBbkI7QUFDWixNQUFJLENBQUMsTUFBTCxFQUFhLE9BQU8sUUFBUSxPQUFSLEVBQVA7QUFDYixTQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBcUI7QUFDdEMsUUFBSSxNQUFNLE9BQU8sTUFBUCxDQUFjLFFBQVEsR0FBdEIsQ0FBVjtBQUNBLFFBQUksSUFBSixHQUFXLENBQ1QsS0FBSyxJQUFMLEVBQVcsY0FBWCxFQUEyQixNQUEzQixDQURTLEVBRVQsUUFBUSxRQUFRLE9BQVIsQ0FBZ0IsaUNBQWhCLENBQVIsQ0FGUyxFQUdULFFBQVEsR0FBUixDQUFZLElBSEgsRUFJVCxJQUpTLENBSUosU0FKSSxDQUFYOztBQU1BLFFBQUksT0FBTyxNQUFNLElBQU4sRUFBWSxDQUFDLElBQUQsRUFBTyxNQUFQLENBQVosRUFBNEI7QUFDckMsV0FBSyxJQURnQztBQUVyQyxXQUFLO0FBRmdDLEtBQTVCLENBQVg7O0FBS0EsUUFBSSxRQUFKLEVBQWMsT0FBTyxNQUFyQjs7QUFFQSxTQUFLLEVBQUwsQ0FBUSxPQUFSLEVBQWlCLE1BQWpCO0FBQ0EsV0FBTyxLQUFLLE1BQVosRUFBb0IsRUFBcEIsQ0FBdUIsTUFBdkIsRUFBK0I7QUFBQSxhQUFRLElBQUksUUFBSixFQUFjLElBQWQsQ0FBUjtBQUFBLEtBQS9CO0FBQ0EsV0FBTyxLQUFLLE1BQVosRUFBb0IsRUFBcEIsQ0FBdUIsTUFBdkIsRUFBK0I7QUFBQSxhQUFRLElBQUksUUFBSixFQUFjLElBQWQsQ0FBUjtBQUFBLEtBQS9COztBQUVBLFNBQUssRUFBTCxDQUFRLE9BQVIsRUFBaUIsZ0JBQVE7QUFDdkIsVUFBSSxPQUFPLENBQVgsRUFBYyxPQUFPLE9BQU8sSUFBSSxLQUFKLENBQVUsZUFBZSxJQUF6QixDQUFQLENBQVA7QUFDZCxhQUFPLFNBQVA7QUFDRCxLQUhEO0FBSUQsR0F2Qk0sQ0FBUDtBQXdCRCIsImZpbGUiOiJwb3N0X2luc3RhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4uL3Byb21pc2UnKVxudmFyIGpvaW4gPSByZXF1aXJlKCdwYXRoJykuam9pblxudmFyIGRpcm5hbWUgPSByZXF1aXJlKCdwYXRoJykuZGlybmFtZVxudmFyIHNwYXduID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdwbnBtOnBvc3RfaW5zdGFsbCcpXG52YXIgZGVsaW1pdGVyID0gcmVxdWlyZSgncGF0aCcpLmRlbGltaXRlclxudmFyIGJ5bGluZSA9IHJlcXVpcmUoJ2J5bGluZScpXG52YXIgZnMgPSByZXF1aXJlKCdtei9mcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcG9zdEluc3RhbGwgKHJvb3RfLCBwa2csIGxvZykge1xuICB2YXIgcm9vdCA9IGpvaW4ocm9vdF8sICdfJylcbiAgZGVidWcoJ3Bvc3RpbnN0YWxsJywgcGtnLm5hbWUgKyAnQCcgKyBwa2cudmVyc2lvbilcbiAgdmFyIHNjcmlwdHMgPSBwa2cgJiYgcGtnLnNjcmlwdHMgfHwge31cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgLnRoZW4oXyA9PiAhc2NyaXB0cy5pbnN0YWxsICYmIGNoZWNrQmluZGluZ0d5cChyb290LCBsb2cpKVxuICAgIC50aGVuKF8gPT4gcnVuU2NyaXB0KHJvb3QsIHNjcmlwdHMucHJlaW5zdGFsbCwgbG9nKSlcbiAgICAudGhlbihfID0+IHJ1blNjcmlwdChyb290LCBzY3JpcHRzLmluc3RhbGwsIGxvZykpXG4gICAgLnRoZW4oXyA9PiBydW5TY3JpcHQocm9vdCwgc2NyaXB0cy5wb3N0aW5zdGFsbCwgbG9nKSlcbn1cblxuLypcbiAqIFJ1biBub2RlLWd5cCB3aGVuIGJpbmRpbmcuZ3lwIGlzIGF2YWlsYWJsZS4gT25seSBkbyB0aGlzIHdoZW4gdGhlcmUncyBub1xuICogYGluc3RhbGxgIHNjcmlwdCAoc2VlIGBucG0gaGVscCBzY3JpcHRzYCkuXG4gKi9cblxuZnVuY3Rpb24gY2hlY2tCaW5kaW5nR3lwIChyb290LCBsb2cpIHtcbiAgcmV0dXJuIGZzLnN0YXQoam9pbihyb290LCAnYmluZGluZy5neXAnKSlcbiAgLnRoZW4oXyA9PiBydW5TY3JpcHQocm9vdCwgJ25vZGUtZ3lwIHJlYnVpbGQnLCBsb2cpKVxuICAuY2F0Y2goZXJyID0+IHtcbiAgICBpZiAoZXJyLmNvZGUgIT09ICdFTk9FTlQnKSB0aHJvdyBlcnJcbiAgfSlcbn1cblxuLypcbiAqIFJ1bnMgYW4gbnBtIHNjcmlwdC5cbiAqL1xuXG5mdW5jdGlvbiBydW5TY3JpcHQgKHJvb3QsIHNjcmlwdCwgbG9nKSB7XG4gIGlmIChzY3JpcHQpIGRlYnVnKCdydW5zY3JpcHQnLCBzY3JpcHQpXG4gIGlmICghc2NyaXB0KSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZW52ID0gT2JqZWN0LmNyZWF0ZShwcm9jZXNzLmVudilcbiAgICBlbnYuUEFUSCA9IFtcbiAgICAgIGpvaW4ocm9vdCwgJ25vZGVfbW9kdWxlcycsICcuYmluJyksXG4gICAgICBkaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgnLi4vLi4vYmluL25vZGUtZ3lwLWJpbi9ub2RlLWd5cCcpKSxcbiAgICAgIHByb2Nlc3MuZW52LlBBVEhcbiAgICBdLmpvaW4oZGVsaW1pdGVyKVxuXG4gICAgdmFyIHByb2MgPSBzcGF3bignc2gnLCBbJy1jJywgc2NyaXB0XSwge1xuICAgICAgY3dkOiByb290LFxuICAgICAgZW52OiBlbnZcbiAgICB9KVxuXG4gICAgbG9nKCdzdGRlcnInLCAnJCAnICsgc2NyaXB0KVxuXG4gICAgcHJvYy5vbignZXJyb3InLCByZWplY3QpXG4gICAgYnlsaW5lKHByb2Muc3Rkb3V0KS5vbignZGF0YScsIGxpbmUgPT4gbG9nKCdzdGRvdXQnLCBsaW5lKSlcbiAgICBieWxpbmUocHJvYy5zdGRlcnIpLm9uKCdkYXRhJywgbGluZSA9PiBsb2coJ3N0ZGVycicsIGxpbmUpKVxuXG4gICAgcHJvYy5vbignY2xvc2UnLCBjb2RlID0+IHtcbiAgICAgIGlmIChjb2RlID4gMCkgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0V4aXQgY29kZSAnICsgY29kZSkpXG4gICAgICByZXR1cm4gcmVzb2x2ZSgpXG4gICAgfSlcbiAgfSlcbn1cbiJdfQ==