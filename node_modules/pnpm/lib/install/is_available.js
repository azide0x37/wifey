var Promise = require('../promise');
var semver = require('semver');
var join = require('path').join;
var fs = require('mz/fs');

/*
 * Check if a module exists (eg, `node_modules/node-pre-gyp`). This is the case when
 * it's part of bundleDependencies.
 *
 * This check is also responsible for stopping `pnpm i lodash` from doing anything when
 * 'node_modules/lodash' already exists.
 *
 *     spec = { name: 'lodash', spec: '^3.0.2' }
 *     isAvailable(spec, 'path/to/node_modules')
 */

module.exports = function isAvailable(spec, modules) {
  var name = spec && spec.name;
  if (!name) return Promise.resolve(false);

  var packageJsonPath = join(modules, name, 'package.json');

  return Promise.resolve().then(function (_) {
    return fs.readFile(packageJsonPath);
  }).then(function (_) {
    return JSON.parse(_);
  }).then(function (_) {
    return verify(spec, _);
  }).catch(function (err) {
    if (err.code !== 'ENOENT') throw err;
    return false;
  });

  function verify(spec, packageJson) {
    return packageJson.name === spec.name && (spec.type !== 'range' && spec.type !== 'version' || semver.satisfies(packageJson.version, spec.spec));
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vaW5zdGFsbC9pc19hdmFpbGFibGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxVQUFVLFFBQVEsWUFBUixDQUFkO0FBQ0EsSUFBSSxTQUFTLFFBQVEsUUFBUixDQUFiO0FBQ0EsSUFBSSxPQUFPLFFBQVEsTUFBUixFQUFnQixJQUEzQjtBQUNBLElBQUksS0FBSyxRQUFRLE9BQVIsQ0FBVDs7Ozs7Ozs7Ozs7OztBQWFBLE9BQU8sT0FBUCxHQUFpQixTQUFTLFdBQVQsQ0FBc0IsSUFBdEIsRUFBNEIsT0FBNUIsRUFBcUM7QUFDcEQsTUFBSSxPQUFPLFFBQVEsS0FBSyxJQUF4QjtBQUNBLE1BQUksQ0FBQyxJQUFMLEVBQVcsT0FBTyxRQUFRLE9BQVIsQ0FBZ0IsS0FBaEIsQ0FBUDs7QUFFWCxNQUFJLGtCQUFrQixLQUFLLE9BQUwsRUFBYyxJQUFkLEVBQW9CLGNBQXBCLENBQXRCOztBQUVBLFNBQU8sUUFBUSxPQUFSLEdBQ0osSUFESSxDQUNDO0FBQUEsV0FBSyxHQUFHLFFBQUgsQ0FBWSxlQUFaLENBQUw7QUFBQSxHQURELEVBRUosSUFGSSxDQUVDO0FBQUEsV0FBSyxLQUFLLEtBQUwsQ0FBVyxDQUFYLENBQUw7QUFBQSxHQUZELEVBR0osSUFISSxDQUdDO0FBQUEsV0FBSyxPQUFPLElBQVAsRUFBYSxDQUFiLENBQUw7QUFBQSxHQUhELEVBSUosS0FKSSxDQUlFLGVBQU87QUFDWixRQUFJLElBQUksSUFBSixLQUFhLFFBQWpCLEVBQTJCLE1BQU0sR0FBTjtBQUMzQixXQUFPLEtBQVA7QUFDRCxHQVBJLENBQVA7O0FBU0EsV0FBUyxNQUFULENBQWlCLElBQWpCLEVBQXVCLFdBQXZCLEVBQW9DO0FBQ2xDLFdBQU8sWUFBWSxJQUFaLEtBQXFCLEtBQUssSUFBMUIsS0FDSCxLQUFLLElBQUwsS0FBYyxPQUFkLElBQXlCLEtBQUssSUFBTCxLQUFjLFNBQXhDLElBQ0QsT0FBTyxTQUFQLENBQWlCLFlBQVksT0FBN0IsRUFBc0MsS0FBSyxJQUEzQyxDQUZLLENBQVA7QUFHRDtBQUNGLENBcEJEIiwiZmlsZSI6ImlzX2F2YWlsYWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBQcm9taXNlID0gcmVxdWlyZSgnLi4vcHJvbWlzZScpXG52YXIgc2VtdmVyID0gcmVxdWlyZSgnc2VtdmVyJylcbnZhciBqb2luID0gcmVxdWlyZSgncGF0aCcpLmpvaW5cbnZhciBmcyA9IHJlcXVpcmUoJ216L2ZzJylcblxuLypcbiAqIENoZWNrIGlmIGEgbW9kdWxlIGV4aXN0cyAoZWcsIGBub2RlX21vZHVsZXMvbm9kZS1wcmUtZ3lwYCkuIFRoaXMgaXMgdGhlIGNhc2Ugd2hlblxuICogaXQncyBwYXJ0IG9mIGJ1bmRsZURlcGVuZGVuY2llcy5cbiAqXG4gKiBUaGlzIGNoZWNrIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIHN0b3BwaW5nIGBwbnBtIGkgbG9kYXNoYCBmcm9tIGRvaW5nIGFueXRoaW5nIHdoZW5cbiAqICdub2RlX21vZHVsZXMvbG9kYXNoJyBhbHJlYWR5IGV4aXN0cy5cbiAqXG4gKiAgICAgc3BlYyA9IHsgbmFtZTogJ2xvZGFzaCcsIHNwZWM6ICdeMy4wLjInIH1cbiAqICAgICBpc0F2YWlsYWJsZShzcGVjLCAncGF0aC90by9ub2RlX21vZHVsZXMnKVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBdmFpbGFibGUgKHNwZWMsIG1vZHVsZXMpIHtcbiAgdmFyIG5hbWUgPSBzcGVjICYmIHNwZWMubmFtZVxuICBpZiAoIW5hbWUpIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG5cbiAgdmFyIHBhY2thZ2VKc29uUGF0aCA9IGpvaW4obW9kdWxlcywgbmFtZSwgJ3BhY2thZ2UuanNvbicpXG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgLnRoZW4oXyA9PiBmcy5yZWFkRmlsZShwYWNrYWdlSnNvblBhdGgpKVxuICAgIC50aGVuKF8gPT4gSlNPTi5wYXJzZShfKSlcbiAgICAudGhlbihfID0+IHZlcmlmeShzcGVjLCBfKSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGlmIChlcnIuY29kZSAhPT0gJ0VOT0VOVCcpIHRocm93IGVyclxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcblxuICBmdW5jdGlvbiB2ZXJpZnkgKHNwZWMsIHBhY2thZ2VKc29uKSB7XG4gICAgcmV0dXJuIHBhY2thZ2VKc29uLm5hbWUgPT09IHNwZWMubmFtZSAmJlxuICAgICAgKChzcGVjLnR5cGUgIT09ICdyYW5nZScgJiYgc3BlYy50eXBlICE9PSAndmVyc2lvbicpIHx8XG4gICAgICBzZW12ZXIuc2F0aXNmaWVzKHBhY2thZ2VKc29uLnZlcnNpb24sIHNwZWMuc3BlYykpXG4gIH1cbn1cbiJdfQ==