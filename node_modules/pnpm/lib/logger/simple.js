var chalk = require('chalk');

var UPDATERS = ['resolving', 'resolved', 'download-start', 'dependencies'];

var BAR_LENGTH = 20;

var s = {
  gray: chalk.gray,
  green: chalk.green,
  bold: chalk.bold
};

/*
 * Simple percent logger
 */

module.exports = function logger() {
  var out = process.stdout;
  var progress = { done: 0, total: 0 };
  var lastStatus;
  var done = {};

  process.on('exit', function (_) {
    out.write(reset());
  });

  return function (pkg) {
    var name = pkg.name ? pkg.name + ' ' + pkg.rawSpec : pkg.rawSpec;

    update();
    progress.total += UPDATERS.length + 20;
    var left = UPDATERS.length + 20;
    var pkgData;

    return function (status, args) {
      if (status === 'done') progress.done += left;

      if (~UPDATERS.indexOf(status)) {
        progress.done += 1;
        left -= 1;
      }

      if (status === 'package.json') {
        pkgData = args;
      }

      lastStatus = name;

      if (process.env.VERBOSE) {
        if (status !== 'downloading') update(getName() + ' ' + status);
      } else if (status === 'done') {
        update(getName());
      } else {
        update();
      }
    };

    function getName() {
      if (pkgData && pkgData.version) {
        return pkgData.name + ' ' + s.gray(pkgData.version);
      } else {
        return pkgData && pkgData.name || name;
      }
    }

    function update(line) {
      if (line && !done[line]) {
        done[line] = true;
        out.write(reset() + line + '\n');
      }

      var percent = progress.done / progress.total;
      if (progress.total > 0 && out.isTTY) {
        var bar = Math.round(percent * BAR_LENGTH);
        out.write(reset() + s.bold(Math.round(percent * 100) + '%') + ' ' + s.green(Array(bar).join('=') + '>') + Array(BAR_LENGTH - bar).join(' ') + ' ' + s.gray(lastStatus.substr(0, 40))) + ' ';
      }
    }
  };

  function reset() {
    return out.isTTY ? '\r' + Array(out.columns).join(' ') + '\r' : '';
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vbG9nZ2VyL3NpbXBsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFFBQVEsUUFBUSxPQUFSLENBQVo7O0FBRUEsSUFBSSxXQUFXLENBQ2IsV0FEYSxFQUNBLFVBREEsRUFDWSxnQkFEWixFQUM4QixjQUQ5QixDQUFmOztBQUlBLElBQUksYUFBYSxFQUFqQjs7QUFFQSxJQUFJLElBQUk7QUFDTixRQUFNLE1BQU0sSUFETjtBQUVOLFNBQU8sTUFBTSxLQUZQO0FBR04sUUFBTSxNQUFNO0FBSE4sQ0FBUjs7Ozs7O0FBVUEsT0FBTyxPQUFQLEdBQWlCLFNBQVMsTUFBVCxHQUFtQjtBQUNsQyxNQUFJLE1BQU0sUUFBUSxNQUFsQjtBQUNBLE1BQUksV0FBVyxFQUFFLE1BQU0sQ0FBUixFQUFXLE9BQU8sQ0FBbEIsRUFBZjtBQUNBLE1BQUksVUFBSjtBQUNBLE1BQUksT0FBTyxFQUFYOztBQUVBLFVBQVEsRUFBUixDQUFXLE1BQVgsRUFBbUIsYUFBSztBQUN0QixRQUFJLEtBQUosQ0FBVSxPQUFWO0FBQ0QsR0FGRDs7QUFJQSxTQUFPLFVBQVUsR0FBVixFQUFlO0FBQ3BCLFFBQUksT0FBTyxJQUFJLElBQUosR0FDTixJQUFJLElBQUosR0FBVyxHQUFYLEdBQWlCLElBQUksT0FEZixHQUVQLElBQUksT0FGUjs7QUFJQTtBQUNBLGFBQVMsS0FBVCxJQUFrQixTQUFTLE1BQVQsR0FBa0IsRUFBcEM7QUFDQSxRQUFJLE9BQU8sU0FBUyxNQUFULEdBQWtCLEVBQTdCO0FBQ0EsUUFBSSxPQUFKOztBQUVBLFdBQU8sVUFBVSxNQUFWLEVBQWtCLElBQWxCLEVBQXdCO0FBQzdCLFVBQUksV0FBVyxNQUFmLEVBQXVCLFNBQVMsSUFBVCxJQUFpQixJQUFqQjs7QUFFdkIsVUFBSSxDQUFDLFNBQVMsT0FBVCxDQUFpQixNQUFqQixDQUFMLEVBQStCO0FBQzdCLGlCQUFTLElBQVQsSUFBaUIsQ0FBakI7QUFDQSxnQkFBUSxDQUFSO0FBQ0Q7O0FBRUQsVUFBSSxXQUFXLGNBQWYsRUFBK0I7QUFDN0Isa0JBQVUsSUFBVjtBQUNEOztBQUVELG1CQUFhLElBQWI7O0FBRUEsVUFBSSxRQUFRLEdBQVIsQ0FBWSxPQUFoQixFQUF5QjtBQUN2QixZQUFJLFdBQVcsYUFBZixFQUE4QixPQUFPLFlBQVksR0FBWixHQUFrQixNQUF6QjtBQUMvQixPQUZELE1BRU8sSUFBSSxXQUFXLE1BQWYsRUFBdUI7QUFDNUIsZUFBTyxTQUFQO0FBQ0QsT0FGTSxNQUVBO0FBQ0w7QUFDRDtBQUNGLEtBckJEOztBQXVCQSxhQUFTLE9BQVQsR0FBb0I7QUFDbEIsVUFBSSxXQUFXLFFBQVEsT0FBdkIsRUFBZ0M7QUFDOUIsZUFBTyxRQUFRLElBQVIsR0FBZSxHQUFmLEdBQXFCLEVBQUUsSUFBRixDQUFPLFFBQVEsT0FBZixDQUE1QjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sV0FBVyxRQUFRLElBQW5CLElBQTJCLElBQWxDO0FBQ0Q7QUFDRjs7QUFFRCxhQUFTLE1BQVQsQ0FBaUIsSUFBakIsRUFBdUI7QUFDckIsVUFBSSxRQUFRLENBQUMsS0FBSyxJQUFMLENBQWIsRUFBeUI7QUFDdkIsYUFBSyxJQUFMLElBQWEsSUFBYjtBQUNBLFlBQUksS0FBSixDQUFVLFVBQVUsSUFBVixHQUFpQixJQUEzQjtBQUNEOztBQUVELFVBQUksVUFBVSxTQUFTLElBQVQsR0FBZ0IsU0FBUyxLQUF2QztBQUNBLFVBQUksU0FBUyxLQUFULEdBQWlCLENBQWpCLElBQXNCLElBQUksS0FBOUIsRUFBcUM7QUFDbkMsWUFBSSxNQUFNLEtBQUssS0FBTCxDQUFXLFVBQVUsVUFBckIsQ0FBVjtBQUNBLFlBQUksS0FBSixDQUNFLFVBQ0EsRUFBRSxJQUFGLENBQU8sS0FBSyxLQUFMLENBQVcsVUFBVSxHQUFyQixJQUE0QixHQUFuQyxDQURBLEdBQzBDLEdBRDFDLEdBRUEsRUFBRSxLQUFGLENBQVEsTUFBTSxHQUFOLEVBQVcsSUFBWCxDQUFnQixHQUFoQixJQUF1QixHQUEvQixDQUZBLEdBR0EsTUFBTSxhQUFhLEdBQW5CLEVBQXdCLElBQXhCLENBQTZCLEdBQTdCLENBSEEsR0FHb0MsR0FIcEMsR0FJQSxFQUFFLElBQUYsQ0FBTyxXQUFXLE1BQVgsQ0FBa0IsQ0FBbEIsRUFBcUIsRUFBckIsQ0FBUCxDQUxGLElBS3NDLEdBTHRDO0FBTUQ7QUFDRjtBQUNGLEdBMUREOztBQTREQSxXQUFTLEtBQVQsR0FBa0I7QUFDaEIsV0FBTyxJQUFJLEtBQUosR0FDSCxPQUFPLE1BQU0sSUFBSSxPQUFWLEVBQW1CLElBQW5CLENBQXdCLEdBQXhCLENBQVAsR0FBc0MsSUFEbkMsR0FFSCxFQUZKO0FBR0Q7QUFDRixDQTNFRCIsImZpbGUiOiJzaW1wbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpXG5cbnZhciBVUERBVEVSUyA9IFtcbiAgJ3Jlc29sdmluZycsICdyZXNvbHZlZCcsICdkb3dubG9hZC1zdGFydCcsICdkZXBlbmRlbmNpZXMnXG5dXG5cbnZhciBCQVJfTEVOR1RIID0gMjBcblxudmFyIHMgPSB7XG4gIGdyYXk6IGNoYWxrLmdyYXksXG4gIGdyZWVuOiBjaGFsay5ncmVlbixcbiAgYm9sZDogY2hhbGsuYm9sZFxufVxuXG4vKlxuICogU2ltcGxlIHBlcmNlbnQgbG9nZ2VyXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2dnZXIgKCkge1xuICB2YXIgb3V0ID0gcHJvY2Vzcy5zdGRvdXRcbiAgdmFyIHByb2dyZXNzID0geyBkb25lOiAwLCB0b3RhbDogMCB9XG4gIHZhciBsYXN0U3RhdHVzXG4gIHZhciBkb25lID0ge31cblxuICBwcm9jZXNzLm9uKCdleGl0JywgXyA9PiB7XG4gICAgb3V0LndyaXRlKHJlc2V0KCkpXG4gIH0pXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChwa2cpIHtcbiAgICB2YXIgbmFtZSA9IHBrZy5uYW1lXG4gICAgICA/IChwa2cubmFtZSArICcgJyArIHBrZy5yYXdTcGVjKVxuICAgICAgOiBwa2cucmF3U3BlY1xuXG4gICAgdXBkYXRlKClcbiAgICBwcm9ncmVzcy50b3RhbCArPSBVUERBVEVSUy5sZW5ndGggKyAyMFxuICAgIHZhciBsZWZ0ID0gVVBEQVRFUlMubGVuZ3RoICsgMjBcbiAgICB2YXIgcGtnRGF0YVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0dXMsIGFyZ3MpIHtcbiAgICAgIGlmIChzdGF0dXMgPT09ICdkb25lJykgcHJvZ3Jlc3MuZG9uZSArPSBsZWZ0XG5cbiAgICAgIGlmICh+VVBEQVRFUlMuaW5kZXhPZihzdGF0dXMpKSB7XG4gICAgICAgIHByb2dyZXNzLmRvbmUgKz0gMVxuICAgICAgICBsZWZ0IC09IDFcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXR1cyA9PT0gJ3BhY2thZ2UuanNvbicpIHtcbiAgICAgICAgcGtnRGF0YSA9IGFyZ3NcbiAgICAgIH1cblxuICAgICAgbGFzdFN0YXR1cyA9IG5hbWVcblxuICAgICAgaWYgKHByb2Nlc3MuZW52LlZFUkJPU0UpIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gJ2Rvd25sb2FkaW5nJykgdXBkYXRlKGdldE5hbWUoKSArICcgJyArIHN0YXR1cylcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnZG9uZScpIHtcbiAgICAgICAgdXBkYXRlKGdldE5hbWUoKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TmFtZSAoKSB7XG4gICAgICBpZiAocGtnRGF0YSAmJiBwa2dEYXRhLnZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHBrZ0RhdGEubmFtZSArICcgJyArIHMuZ3JheShwa2dEYXRhLnZlcnNpb24pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGtnRGF0YSAmJiBwa2dEYXRhLm5hbWUgfHwgbmFtZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZSAobGluZSkge1xuICAgICAgaWYgKGxpbmUgJiYgIWRvbmVbbGluZV0pIHtcbiAgICAgICAgZG9uZVtsaW5lXSA9IHRydWVcbiAgICAgICAgb3V0LndyaXRlKHJlc2V0KCkgKyBsaW5lICsgJ1xcbicpXG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJjZW50ID0gcHJvZ3Jlc3MuZG9uZSAvIHByb2dyZXNzLnRvdGFsXG4gICAgICBpZiAocHJvZ3Jlc3MudG90YWwgPiAwICYmIG91dC5pc1RUWSkge1xuICAgICAgICB2YXIgYmFyID0gTWF0aC5yb3VuZChwZXJjZW50ICogQkFSX0xFTkdUSClcbiAgICAgICAgb3V0LndyaXRlKFxuICAgICAgICAgIHJlc2V0KCkgK1xuICAgICAgICAgIHMuYm9sZChNYXRoLnJvdW5kKHBlcmNlbnQgKiAxMDApICsgJyUnKSArICcgJyArXG4gICAgICAgICAgcy5ncmVlbihBcnJheShiYXIpLmpvaW4oJz0nKSArICc+JykgK1xuICAgICAgICAgIEFycmF5KEJBUl9MRU5HVEggLSBiYXIpLmpvaW4oJyAnKSArICcgJyArXG4gICAgICAgICAgcy5ncmF5KGxhc3RTdGF0dXMuc3Vic3RyKDAsIDQwKSkpICsgJyAnXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQgKCkge1xuICAgIHJldHVybiBvdXQuaXNUVFlcbiAgICAgID8gJ1xccicgKyBBcnJheShvdXQuY29sdW1ucykuam9pbignICcpICsgJ1xccidcbiAgICAgIDogJydcbiAgfVxufVxuIl19