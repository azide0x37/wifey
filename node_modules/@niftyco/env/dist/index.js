'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Environment = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _fs = require('fs');

var _lodash = require('lodash');

class Environment {
  constructor(file = false, overwrite = false) {
    this.$env = (0, _lodash.pickBy)(process.env, (_, key) => key.toUpperCase() === key);
    if (file && (0, _fs.existsSync)(file)) {
      this.load(file, overwrite);
    }
  }

  load(file, overwrite = false) {
    const data = (0, _fs.readFileSync)(file, 'utf8');
    data.split(/\n/).map(line => {
      var _line$split = line.split(/=|\s/);

      var _line$split2 = _slicedToArray(_line$split, 2);

      const key = _line$split2[0];
      const value = _line$split2[1];

      this.set(key, value, overwrite);
    });
    return this;
  }

  all(filter = () => false) {
    return (0, _lodash.omitBy)(this.$env, filter);
  }

  has(key) {
    return this.$env.hasOwnProperty(key.toUpperCase());
  }

  set(key, value, overwrite) {
    if ((0, _lodash.isObject)(key)) {
      return Object.keys(key).map(k => this.set(k, key[k]));
    }
    if (!this.get(key) || overwrite) {
      this.$env[key.toUpperCase()] = value;
    }
    return this.get(key);
  }

  get(key, value) {
    if (this.has(key)) {
      return this.$env[key.toUpperCase()];
    }
    return value;
  }
}

exports.Environment = Environment;
exports.default = new Environment();