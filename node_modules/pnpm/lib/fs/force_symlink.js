'use strict';

var fs = require('fs');
var thenify = require('thenify');
var debug = require('debug')('pnpm:symlink');

/*
 * Creates a symlink. Re-link if a symlink already exists at the supplied
 * srcPath. API compatible with [`fs#symlink`](https://nodejs.org/api/fs.html#fs_fs_symlink_srcpath_dstpath_type_callback).
 */

function forceSymlink(srcPath, dstPath, type, cb) {
  debug('%s -> %s', srcPath, dstPath);
  type = typeof type === 'string' ? type : null;
  cb = arguments[arguments.length - 1] || function () {};
  try {
    fs.symlinkSync(srcPath, dstPath, type);
    cb();
  } catch (err) {
    if (err.code !== 'EEXIST') return cb(err);

    fs.readlink(dstPath, function (err, linkString) {
      if (err || srcPath === linkString) return cb(err);

      fs.unlink(dstPath, function (err) {
        if (err) return cb(err);
        forceSymlink(srcPath, dstPath, cb);
      });
    });
  }
}

module.exports = thenify(forceSymlink);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vZnMvZm9yY2Vfc3ltbGluay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJLEtBQUssUUFBUSxJQUFSLENBQVQ7QUFDQSxJQUFJLFVBQVUsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJLFFBQVEsUUFBUSxPQUFSLEVBQWlCLGNBQWpCLENBQVo7Ozs7Ozs7QUFPQSxTQUFTLFlBQVQsQ0FBdUIsT0FBdkIsRUFBZ0MsT0FBaEMsRUFBeUMsSUFBekMsRUFBK0MsRUFBL0MsRUFBbUQ7QUFDakQsUUFBTSxVQUFOLEVBQWtCLE9BQWxCLEVBQTJCLE9BQTNCO0FBQ0EsU0FBTyxPQUFPLElBQVAsS0FBZ0IsUUFBaEIsR0FBMkIsSUFBM0IsR0FBa0MsSUFBekM7QUFDQSxPQUFLLFVBQVUsVUFBVSxNQUFWLEdBQW1CLENBQTdCLEtBQW1DLFlBQVksQ0FBRSxDQUF0RDtBQUNBLE1BQUk7QUFDRixPQUFHLFdBQUgsQ0FBZSxPQUFmLEVBQXdCLE9BQXhCLEVBQWlDLElBQWpDO0FBQ0E7QUFDRCxHQUhELENBR0UsT0FBTyxHQUFQLEVBQVk7QUFDWixRQUFJLElBQUksSUFBSixLQUFhLFFBQWpCLEVBQTJCLE9BQU8sR0FBRyxHQUFILENBQVA7O0FBRTNCLE9BQUcsUUFBSCxDQUFZLE9BQVosRUFBcUIsVUFBVSxHQUFWLEVBQWUsVUFBZixFQUEyQjtBQUM5QyxVQUFJLE9BQU8sWUFBWSxVQUF2QixFQUFtQyxPQUFPLEdBQUcsR0FBSCxDQUFQOztBQUVuQyxTQUFHLE1BQUgsQ0FBVSxPQUFWLEVBQW1CLFVBQVUsR0FBVixFQUFlO0FBQ2hDLFlBQUksR0FBSixFQUFTLE9BQU8sR0FBRyxHQUFILENBQVA7QUFDVCxxQkFBYSxPQUFiLEVBQXNCLE9BQXRCLEVBQStCLEVBQS9CO0FBQ0QsT0FIRDtBQUlELEtBUEQ7QUFRRDtBQUNGOztBQUVELE9BQU8sT0FBUCxHQUFpQixRQUFRLFlBQVIsQ0FBakIiLCJmaWxlIjoiZm9yY2Vfc3ltbGluay5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpXG52YXIgdGhlbmlmeSA9IHJlcXVpcmUoJ3RoZW5pZnknKVxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgncG5wbTpzeW1saW5rJylcblxuLypcbiAqIENyZWF0ZXMgYSBzeW1saW5rLiBSZS1saW5rIGlmIGEgc3ltbGluayBhbHJlYWR5IGV4aXN0cyBhdCB0aGUgc3VwcGxpZWRcbiAqIHNyY1BhdGguIEFQSSBjb21wYXRpYmxlIHdpdGggW2BmcyNzeW1saW5rYF0oaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9mcy5odG1sI2ZzX2ZzX3N5bWxpbmtfc3JjcGF0aF9kc3RwYXRoX3R5cGVfY2FsbGJhY2spLlxuICovXG5cbmZ1bmN0aW9uIGZvcmNlU3ltbGluayAoc3JjUGF0aCwgZHN0UGF0aCwgdHlwZSwgY2IpIHtcbiAgZGVidWcoJyVzIC0+ICVzJywgc3JjUGF0aCwgZHN0UGF0aClcbiAgdHlwZSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiBudWxsXG4gIGNiID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSB8fCBmdW5jdGlvbiAoKSB7fVxuICB0cnkge1xuICAgIGZzLnN5bWxpbmtTeW5jKHNyY1BhdGgsIGRzdFBhdGgsIHR5cGUpXG4gICAgY2IoKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyLmNvZGUgIT09ICdFRVhJU1QnKSByZXR1cm4gY2IoZXJyKVxuXG4gICAgZnMucmVhZGxpbmsoZHN0UGF0aCwgZnVuY3Rpb24gKGVyciwgbGlua1N0cmluZykge1xuICAgICAgaWYgKGVyciB8fCBzcmNQYXRoID09PSBsaW5rU3RyaW5nKSByZXR1cm4gY2IoZXJyKVxuXG4gICAgICBmcy51bmxpbmsoZHN0UGF0aCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKVxuICAgICAgICBmb3JjZVN5bWxpbmsoc3JjUGF0aCwgZHN0UGF0aCwgY2IpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aGVuaWZ5KGZvcmNlU3ltbGluaylcbiJdfQ==