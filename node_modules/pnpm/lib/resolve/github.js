var got = require('../got');

/**
 * Resolves a 'hosted' package hosted on 'github'.
 */

var PARSE_GITHUB_RE = /^github:([^\/]+)\/([^#]+)(#(.+))?$/;

module.exports = function resolveGithub(pkg) {
  var spec = parseGithubSpec(pkg);
  return resolveRef(spec).then(function (ref) {
    spec.ref = ref;
    return resolvePackageName(spec).then(function (name) {
      var fullname = name + ['@github', spec.owner, spec.repo, spec.ref].join('!');
      return {
        name: name,
        fullname: fullname,
        dist: {
          tarball: ['https://api.github.com/repos', spec.owner, spec.repo, 'tarball', spec.ref].join('/')
        }
      };
    });
  });
};

function resolvePackageName(spec) {
  var url = ['https://api.github.com/repos', spec.owner, spec.repo, 'contents/package.json?ref=' + spec.ref].join('/');
  return getJSON(url).then(function (body) {
    var content = new Buffer(body.content, 'base64').toString('utf8');
    var pkg = JSON.parse(content);
    return pkg.name;
  });
}

function resolveRef(spec) {
  var url = ['https://api.github.com/repos', spec.owner, spec.repo, 'commits', spec.ref].join('/');
  return getJSON(url).then(function (body) {
    return body.sha;
  });
}

function getJSON(url) {
  return got.get(url).then(function (res) {
    return res.promise;
  }).then(function (res) {
    var body = JSON.parse(res.body);
    return body;
  });
}

function parseGithubSpec(pkg) {
  var m = PARSE_GITHUB_RE.exec(pkg.hosted.shortcut);
  if (!m) {
    throw new Error('cannot parse: ' + pkg.hosted.shortcut);
  }
  var owner = m[1];
  var repo = m[2];
  var ref = m[4] || 'HEAD';
  return { owner: owner, repo: repo, ref: ref };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vcmVzb2x2ZS9naXRodWIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxNQUFNLFFBQVEsUUFBUixDQUFWOzs7Ozs7QUFNQSxJQUFJLGtCQUFrQixvQ0FBdEI7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLFNBQVMsYUFBVCxDQUF3QixHQUF4QixFQUE2QjtBQUM1QyxNQUFJLE9BQU8sZ0JBQWdCLEdBQWhCLENBQVg7QUFDQSxTQUFPLFdBQVcsSUFBWCxFQUFpQixJQUFqQixDQUFzQixVQUFVLEdBQVYsRUFBZTtBQUMxQyxTQUFLLEdBQUwsR0FBVyxHQUFYO0FBQ0EsV0FBTyxtQkFBbUIsSUFBbkIsRUFBeUIsSUFBekIsQ0FBOEIsVUFBVSxJQUFWLEVBQWdCO0FBQ25ELFVBQUksV0FBVyxPQUFPLENBQUMsU0FBRCxFQUFZLEtBQUssS0FBakIsRUFBd0IsS0FBSyxJQUE3QixFQUFtQyxLQUFLLEdBQXhDLEVBQTZDLElBQTdDLENBQWtELEdBQWxELENBQXRCO0FBQ0EsYUFBTztBQUNMLGNBQU0sSUFERDtBQUVMLGtCQUFVLFFBRkw7QUFHTCxjQUFNO0FBQ0osbUJBQVMsQ0FDUCw4QkFETyxFQUVQLEtBQUssS0FGRSxFQUdQLEtBQUssSUFIRSxFQUlQLFNBSk8sRUFLUCxLQUFLLEdBTEUsRUFNUCxJQU5PLENBTUYsR0FORTtBQURMO0FBSEQsT0FBUDtBQWFELEtBZk0sQ0FBUDtBQWdCRCxHQWxCTSxDQUFQO0FBbUJELENBckJEOztBQXVCQSxTQUFTLGtCQUFULENBQTZCLElBQTdCLEVBQW1DO0FBQ2pDLE1BQUksTUFBTSxDQUNSLDhCQURRLEVBRVIsS0FBSyxLQUZHLEVBR1IsS0FBSyxJQUhHLEVBSVIsK0JBQStCLEtBQUssR0FKNUIsRUFLUixJQUxRLENBS0gsR0FMRyxDQUFWO0FBTUEsU0FBTyxRQUFRLEdBQVIsRUFBYSxJQUFiLENBQWtCLFVBQVUsSUFBVixFQUFnQjtBQUN2QyxRQUFJLFVBQVUsSUFBSSxNQUFKLENBQVcsS0FBSyxPQUFoQixFQUF5QixRQUF6QixFQUFtQyxRQUFuQyxDQUE0QyxNQUE1QyxDQUFkO0FBQ0EsUUFBSSxNQUFNLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBVjtBQUNBLFdBQU8sSUFBSSxJQUFYO0FBQ0QsR0FKTSxDQUFQO0FBS0Q7O0FBRUQsU0FBUyxVQUFULENBQXFCLElBQXJCLEVBQTJCO0FBQ3pCLE1BQUksTUFBTSxDQUNSLDhCQURRLEVBRVIsS0FBSyxLQUZHLEVBR1IsS0FBSyxJQUhHLEVBSVIsU0FKUSxFQUtSLEtBQUssR0FMRyxFQU1SLElBTlEsQ0FNSCxHQU5HLENBQVY7QUFPQSxTQUFPLFFBQVEsR0FBUixFQUFhLElBQWIsQ0FBa0IsVUFBVSxJQUFWLEVBQWdCO0FBQUUsV0FBTyxLQUFLLEdBQVo7QUFBaUIsR0FBckQsQ0FBUDtBQUNEOztBQUVELFNBQVMsT0FBVCxDQUFrQixHQUFsQixFQUF1QjtBQUNyQixTQUFPLElBQUksR0FBSixDQUFRLEdBQVIsRUFDSixJQURJLENBQ0MsVUFBVSxHQUFWLEVBQWU7QUFBRSxXQUFPLElBQUksT0FBWDtBQUFvQixHQUR0QyxFQUVKLElBRkksQ0FFQyxVQUFVLEdBQVYsRUFBZTtBQUNuQixRQUFJLE9BQU8sS0FBSyxLQUFMLENBQVcsSUFBSSxJQUFmLENBQVg7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUxJLENBQVA7QUFNRDs7QUFFRCxTQUFTLGVBQVQsQ0FBMEIsR0FBMUIsRUFBK0I7QUFDN0IsTUFBSSxJQUFJLGdCQUFnQixJQUFoQixDQUFxQixJQUFJLE1BQUosQ0FBVyxRQUFoQyxDQUFSO0FBQ0EsTUFBSSxDQUFDLENBQUwsRUFBUTtBQUNOLFVBQU0sSUFBSSxLQUFKLENBQVUsbUJBQW1CLElBQUksTUFBSixDQUFXLFFBQXhDLENBQU47QUFDRDtBQUNELE1BQUksUUFBUSxFQUFFLENBQUYsQ0FBWjtBQUNBLE1BQUksT0FBTyxFQUFFLENBQUYsQ0FBWDtBQUNBLE1BQUksTUFBTSxFQUFFLENBQUYsS0FBUSxNQUFsQjtBQUNBLFNBQU8sRUFBQyxPQUFPLEtBQVIsRUFBZSxNQUFNLElBQXJCLEVBQTJCLEtBQUssR0FBaEMsRUFBUDtBQUNEIiwiZmlsZSI6ImdpdGh1Yi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnb3QgPSByZXF1aXJlKCcuLi9nb3QnKVxuXG4vKipcbiAqIFJlc29sdmVzIGEgJ2hvc3RlZCcgcGFja2FnZSBob3N0ZWQgb24gJ2dpdGh1YicuXG4gKi9cblxudmFyIFBBUlNFX0dJVEhVQl9SRSA9IC9eZ2l0aHViOihbXlxcL10rKVxcLyhbXiNdKykoIyguKykpPyQvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVzb2x2ZUdpdGh1YiAocGtnKSB7XG4gIHZhciBzcGVjID0gcGFyc2VHaXRodWJTcGVjKHBrZylcbiAgcmV0dXJuIHJlc29sdmVSZWYoc3BlYykudGhlbihmdW5jdGlvbiAocmVmKSB7XG4gICAgc3BlYy5yZWYgPSByZWZcbiAgICByZXR1cm4gcmVzb2x2ZVBhY2thZ2VOYW1lKHNwZWMpLnRoZW4oZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBmdWxsbmFtZSA9IG5hbWUgKyBbJ0BnaXRodWInLCBzcGVjLm93bmVyLCBzcGVjLnJlcG8sIHNwZWMucmVmXS5qb2luKCchJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGZ1bGxuYW1lOiBmdWxsbmFtZSxcbiAgICAgICAgZGlzdDoge1xuICAgICAgICAgIHRhcmJhbGw6IFtcbiAgICAgICAgICAgICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zJyxcbiAgICAgICAgICAgIHNwZWMub3duZXIsXG4gICAgICAgICAgICBzcGVjLnJlcG8sXG4gICAgICAgICAgICAndGFyYmFsbCcsXG4gICAgICAgICAgICBzcGVjLnJlZlxuICAgICAgICAgIF0uam9pbignLycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUGFja2FnZU5hbWUgKHNwZWMpIHtcbiAgdmFyIHVybCA9IFtcbiAgICAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcycsXG4gICAgc3BlYy5vd25lcixcbiAgICBzcGVjLnJlcG8sXG4gICAgJ2NvbnRlbnRzL3BhY2thZ2UuanNvbj9yZWY9JyArIHNwZWMucmVmXG4gIF0uam9pbignLycpXG4gIHJldHVybiBnZXRKU09OKHVybCkudGhlbihmdW5jdGlvbiAoYm9keSkge1xuICAgIHZhciBjb250ZW50ID0gbmV3IEJ1ZmZlcihib2R5LmNvbnRlbnQsICdiYXNlNjQnKS50b1N0cmluZygndXRmOCcpXG4gICAgdmFyIHBrZyA9IEpTT04ucGFyc2UoY29udGVudClcbiAgICByZXR1cm4gcGtnLm5hbWVcbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVJlZiAoc3BlYykge1xuICB2YXIgdXJsID0gW1xuICAgICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zJyxcbiAgICBzcGVjLm93bmVyLFxuICAgIHNwZWMucmVwbyxcbiAgICAnY29tbWl0cycsXG4gICAgc3BlYy5yZWZcbiAgXS5qb2luKCcvJylcbiAgcmV0dXJuIGdldEpTT04odXJsKS50aGVuKGZ1bmN0aW9uIChib2R5KSB7IHJldHVybiBib2R5LnNoYSB9KVxufVxuXG5mdW5jdGlvbiBnZXRKU09OICh1cmwpIHtcbiAgcmV0dXJuIGdvdC5nZXQodXJsKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHsgcmV0dXJuIHJlcy5wcm9taXNlIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgdmFyIGJvZHkgPSBKU09OLnBhcnNlKHJlcy5ib2R5KVxuICAgICAgcmV0dXJuIGJvZHlcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUdpdGh1YlNwZWMgKHBrZykge1xuICB2YXIgbSA9IFBBUlNFX0dJVEhVQl9SRS5leGVjKHBrZy5ob3N0ZWQuc2hvcnRjdXQpXG4gIGlmICghbSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IHBhcnNlOiAnICsgcGtnLmhvc3RlZC5zaG9ydGN1dClcbiAgfVxuICB2YXIgb3duZXIgPSBtWzFdXG4gIHZhciByZXBvID0gbVsyXVxuICB2YXIgcmVmID0gbVs0XSB8fCAnSEVBRCdcbiAgcmV0dXJuIHtvd25lcjogb3duZXIsIHJlcG86IHJlcG8sIHJlZjogcmVmfVxufVxuIl19