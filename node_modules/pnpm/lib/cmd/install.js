var readPkgUp = require('read-pkg-up');
var dirname = require('path').dirname;
var join = require('path').join;
var resolve = require('path').resolve;
var assign = require('object-assign');
var npa = require('npm-package-arg');

var logger = require('../logger');
var installMultiple = require('../install_multiple');
var config = require('../config');
var save = require('../save');
var linkPeers = require('../install/link_peers');
var runtimeError = require('../runtime_error');

/*
 * Perform installation.
 *
 *     installCmd([ 'lodash', 'foo' ], { quiet: true })
 */

function installCmd(input, flags) {
  var ctx = {};
  var pkg;
  var packagesToInstall;
  var installType;
  var isProductionInstall = flags.production || process.env.NODE_ENV === 'production';

  return readPkgUp().then(function (_) {
    pkg = _;
  }).then(function (_) {
    return updateContext(pkg.path);
  }).then(function (_) {
    return install();
  }).then(function (_) {
    return linkPeers(pkg, ctx.store, ctx.installs);
  });

  function install() {
    installType = input && input.length ? 'named' : 'general';

    if (installType === 'named') {
      packagesToInstall = input;
    } else {
      if (!pkg.pkg) throw runtimeError('No package.json found');
      packagesToInstall = assign({}, pkg.pkg.dependencies || {});
      if (!isProductionInstall) assign(packagesToInstall, pkg.pkg.devDependencies || {});
    }

    return installMultiple(ctx, packagesToInstall, join(ctx.root, 'node_modules'), flags).then(savePkgs);
  }

  function updateContext(packageJson) {
    var root = packageJson ? dirname(packageJson) : process.cwd();
    ctx.root = root;
    ctx.store = resolve(root, config.store_path);
    if (!flags.quiet) ctx.log = logger();else ctx.log = function () {
      return function () {};
    };
  }

  function savePkgs(packages) {
    var saveType = getSaveType(flags);
    if (saveType && installType === 'named') {
      var inputNames = input.map(function (pkgName) {
        return npa(pkgName).name;
      });
      var savedPackages = packages.filter(function (pkg) {
        return inputNames.indexOf(pkg.name) > -1;
      });
      return save(pkg, savedPackages, saveType, flags.saveExact);
    }
  }
}

function getSaveType(flags) {
  if (flags.save) return 'dependencies';
  if (flags.saveDev) return 'devDependencies';
  if (flags.saveOptional) return 'optionalDependencies';
}

module.exports = installCmd;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYn4vY21kL2luc3RhbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxZQUFZLFFBQVEsYUFBUixDQUFoQjtBQUNBLElBQUksVUFBVSxRQUFRLE1BQVIsRUFBZ0IsT0FBOUI7QUFDQSxJQUFJLE9BQU8sUUFBUSxNQUFSLEVBQWdCLElBQTNCO0FBQ0EsSUFBSSxVQUFVLFFBQVEsTUFBUixFQUFnQixPQUE5QjtBQUNBLElBQUksU0FBUyxRQUFRLGVBQVIsQ0FBYjtBQUNBLElBQUksTUFBTSxRQUFRLGlCQUFSLENBQVY7O0FBRUEsSUFBSSxTQUFTLFFBQVEsV0FBUixDQUFiO0FBQ0EsSUFBSSxrQkFBa0IsUUFBUSxxQkFBUixDQUF0QjtBQUNBLElBQUksU0FBUyxRQUFRLFdBQVIsQ0FBYjtBQUNBLElBQUksT0FBTyxRQUFRLFNBQVIsQ0FBWDtBQUNBLElBQUksWUFBWSxRQUFRLHVCQUFSLENBQWhCO0FBQ0EsSUFBSSxlQUFlLFFBQVEsa0JBQVIsQ0FBbkI7Ozs7Ozs7O0FBUUEsU0FBUyxVQUFULENBQXFCLEtBQXJCLEVBQTRCLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUksTUFBTSxFQUFWO0FBQ0EsTUFBSSxHQUFKO0FBQ0EsTUFBSSxpQkFBSjtBQUNBLE1BQUksV0FBSjtBQUNBLE1BQUksc0JBQXNCLE1BQU0sVUFBTixJQUFvQixRQUFRLEdBQVIsQ0FBWSxRQUFaLEtBQXlCLFlBQXZFOztBQUVBLFNBQU8sWUFDSixJQURJLENBQ0MsYUFBSztBQUFFLFVBQU0sQ0FBTjtBQUFTLEdBRGpCLEVBRUosSUFGSSxDQUVDO0FBQUEsV0FBSyxjQUFjLElBQUksSUFBbEIsQ0FBTDtBQUFBLEdBRkQsRUFHSixJQUhJLENBR0M7QUFBQSxXQUFLLFNBQUw7QUFBQSxHQUhELEVBSUosSUFKSSxDQUlDO0FBQUEsV0FBSyxVQUFVLEdBQVYsRUFBZSxJQUFJLEtBQW5CLEVBQTBCLElBQUksUUFBOUIsQ0FBTDtBQUFBLEdBSkQsQ0FBUDs7QUFNQSxXQUFTLE9BQVQsR0FBb0I7QUFDbEIsa0JBQWMsU0FBUyxNQUFNLE1BQWYsR0FBd0IsT0FBeEIsR0FBa0MsU0FBaEQ7O0FBRUEsUUFBSSxnQkFBZ0IsT0FBcEIsRUFBNkI7QUFDM0IsMEJBQW9CLEtBQXBCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSSxDQUFDLElBQUksR0FBVCxFQUFjLE1BQU0sYUFBYSx1QkFBYixDQUFOO0FBQ2QsMEJBQW9CLE9BQU8sRUFBUCxFQUFXLElBQUksR0FBSixDQUFRLFlBQVIsSUFBd0IsRUFBbkMsQ0FBcEI7QUFDQSxVQUFJLENBQUMsbUJBQUwsRUFBMEIsT0FBTyxpQkFBUCxFQUEwQixJQUFJLEdBQUosQ0FBUSxlQUFSLElBQTJCLEVBQXJEO0FBQzNCOztBQUVELFdBQU8sZ0JBQWdCLEdBQWhCLEVBQ0wsaUJBREssRUFFTCxLQUFLLElBQUksSUFBVCxFQUFlLGNBQWYsQ0FGSyxFQUdMLEtBSEssRUFJSixJQUpJLENBSUMsUUFKRCxDQUFQO0FBS0Q7O0FBRUQsV0FBUyxhQUFULENBQXdCLFdBQXhCLEVBQXFDO0FBQ25DLFFBQUksT0FBTyxjQUFjLFFBQVEsV0FBUixDQUFkLEdBQXFDLFFBQVEsR0FBUixFQUFoRDtBQUNBLFFBQUksSUFBSixHQUFXLElBQVg7QUFDQSxRQUFJLEtBQUosR0FBWSxRQUFRLElBQVIsRUFBYyxPQUFPLFVBQXJCLENBQVo7QUFDQSxRQUFJLENBQUMsTUFBTSxLQUFYLEVBQWtCLElBQUksR0FBSixHQUFVLFFBQVYsQ0FBbEIsS0FDSyxJQUFJLEdBQUosR0FBVSxZQUFZO0FBQUUsYUFBTyxZQUFZLENBQUUsQ0FBckI7QUFBdUIsS0FBL0M7QUFDTjs7QUFFRCxXQUFTLFFBQVQsQ0FBbUIsUUFBbkIsRUFBNkI7QUFDM0IsUUFBSSxXQUFXLFlBQVksS0FBWixDQUFmO0FBQ0EsUUFBSSxZQUFZLGdCQUFnQixPQUFoQyxFQUF5QztBQUN2QyxVQUFJLGFBQWEsTUFBTSxHQUFOLENBQVU7QUFBQSxlQUFXLElBQUksT0FBSixFQUFhLElBQXhCO0FBQUEsT0FBVixDQUFqQjtBQUNBLFVBQUksZ0JBQWdCLFNBQVMsTUFBVCxDQUFnQjtBQUFBLGVBQU8sV0FBVyxPQUFYLENBQW1CLElBQUksSUFBdkIsSUFBK0IsQ0FBQyxDQUF2QztBQUFBLE9BQWhCLENBQXBCO0FBQ0EsYUFBTyxLQUFLLEdBQUwsRUFBVSxhQUFWLEVBQXlCLFFBQXpCLEVBQW1DLE1BQU0sU0FBekMsQ0FBUDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTLFdBQVQsQ0FBc0IsS0FBdEIsRUFBNkI7QUFDM0IsTUFBSSxNQUFNLElBQVYsRUFBZ0IsT0FBTyxjQUFQO0FBQ2hCLE1BQUksTUFBTSxPQUFWLEVBQW1CLE9BQU8saUJBQVA7QUFDbkIsTUFBSSxNQUFNLFlBQVYsRUFBd0IsT0FBTyxzQkFBUDtBQUN6Qjs7QUFFRCxPQUFPLE9BQVAsR0FBaUIsVUFBakIiLCJmaWxlIjoiaW5zdGFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZWFkUGtnVXAgPSByZXF1aXJlKCdyZWFkLXBrZy11cCcpXG52YXIgZGlybmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5kaXJuYW1lXG52YXIgam9pbiA9IHJlcXVpcmUoJ3BhdGgnKS5qb2luXG52YXIgcmVzb2x2ZSA9IHJlcXVpcmUoJ3BhdGgnKS5yZXNvbHZlXG52YXIgYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpXG52YXIgbnBhID0gcmVxdWlyZSgnbnBtLXBhY2thZ2UtYXJnJylcblxudmFyIGxvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpXG52YXIgaW5zdGFsbE11bHRpcGxlID0gcmVxdWlyZSgnLi4vaW5zdGFsbF9tdWx0aXBsZScpXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJylcbnZhciBzYXZlID0gcmVxdWlyZSgnLi4vc2F2ZScpXG52YXIgbGlua1BlZXJzID0gcmVxdWlyZSgnLi4vaW5zdGFsbC9saW5rX3BlZXJzJylcbnZhciBydW50aW1lRXJyb3IgPSByZXF1aXJlKCcuLi9ydW50aW1lX2Vycm9yJylcblxuLypcbiAqIFBlcmZvcm0gaW5zdGFsbGF0aW9uLlxuICpcbiAqICAgICBpbnN0YWxsQ21kKFsgJ2xvZGFzaCcsICdmb28nIF0sIHsgcXVpZXQ6IHRydWUgfSlcbiAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsQ21kIChpbnB1dCwgZmxhZ3MpIHtcbiAgdmFyIGN0eCA9IHt9XG4gIHZhciBwa2dcbiAgdmFyIHBhY2thZ2VzVG9JbnN0YWxsXG4gIHZhciBpbnN0YWxsVHlwZVxuICB2YXIgaXNQcm9kdWN0aW9uSW5zdGFsbCA9IGZsYWdzLnByb2R1Y3Rpb24gfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJ1xuXG4gIHJldHVybiByZWFkUGtnVXAoKVxuICAgIC50aGVuKF8gPT4geyBwa2cgPSBfIH0pXG4gICAgLnRoZW4oXyA9PiB1cGRhdGVDb250ZXh0KHBrZy5wYXRoKSlcbiAgICAudGhlbihfID0+IGluc3RhbGwoKSlcbiAgICAudGhlbihfID0+IGxpbmtQZWVycyhwa2csIGN0eC5zdG9yZSwgY3R4Lmluc3RhbGxzKSlcblxuICBmdW5jdGlvbiBpbnN0YWxsICgpIHtcbiAgICBpbnN0YWxsVHlwZSA9IGlucHV0ICYmIGlucHV0Lmxlbmd0aCA/ICduYW1lZCcgOiAnZ2VuZXJhbCdcblxuICAgIGlmIChpbnN0YWxsVHlwZSA9PT0gJ25hbWVkJykge1xuICAgICAgcGFja2FnZXNUb0luc3RhbGwgPSBpbnB1dFxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXBrZy5wa2cpIHRocm93IHJ1bnRpbWVFcnJvcignTm8gcGFja2FnZS5qc29uIGZvdW5kJylcbiAgICAgIHBhY2thZ2VzVG9JbnN0YWxsID0gYXNzaWduKHt9LCBwa2cucGtnLmRlcGVuZGVuY2llcyB8fCB7fSlcbiAgICAgIGlmICghaXNQcm9kdWN0aW9uSW5zdGFsbCkgYXNzaWduKHBhY2thZ2VzVG9JbnN0YWxsLCBwa2cucGtnLmRldkRlcGVuZGVuY2llcyB8fCB7fSlcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFsbE11bHRpcGxlKGN0eCxcbiAgICAgIHBhY2thZ2VzVG9JbnN0YWxsLFxuICAgICAgam9pbihjdHgucm9vdCwgJ25vZGVfbW9kdWxlcycpLFxuICAgICAgZmxhZ3MpXG4gICAgICAudGhlbihzYXZlUGtncylcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNvbnRleHQgKHBhY2thZ2VKc29uKSB7XG4gICAgdmFyIHJvb3QgPSBwYWNrYWdlSnNvbiA/IGRpcm5hbWUocGFja2FnZUpzb24pIDogcHJvY2Vzcy5jd2QoKVxuICAgIGN0eC5yb290ID0gcm9vdFxuICAgIGN0eC5zdG9yZSA9IHJlc29sdmUocm9vdCwgY29uZmlnLnN0b3JlX3BhdGgpXG4gICAgaWYgKCFmbGFncy5xdWlldCkgY3R4LmxvZyA9IGxvZ2dlcigpXG4gICAgZWxzZSBjdHgubG9nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKCkge30gfVxuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZVBrZ3MgKHBhY2thZ2VzKSB7XG4gICAgdmFyIHNhdmVUeXBlID0gZ2V0U2F2ZVR5cGUoZmxhZ3MpXG4gICAgaWYgKHNhdmVUeXBlICYmIGluc3RhbGxUeXBlID09PSAnbmFtZWQnKSB7XG4gICAgICB2YXIgaW5wdXROYW1lcyA9IGlucHV0Lm1hcChwa2dOYW1lID0+IG5wYShwa2dOYW1lKS5uYW1lKVxuICAgICAgdmFyIHNhdmVkUGFja2FnZXMgPSBwYWNrYWdlcy5maWx0ZXIocGtnID0+IGlucHV0TmFtZXMuaW5kZXhPZihwa2cubmFtZSkgPiAtMSlcbiAgICAgIHJldHVybiBzYXZlKHBrZywgc2F2ZWRQYWNrYWdlcywgc2F2ZVR5cGUsIGZsYWdzLnNhdmVFeGFjdClcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2F2ZVR5cGUgKGZsYWdzKSB7XG4gIGlmIChmbGFncy5zYXZlKSByZXR1cm4gJ2RlcGVuZGVuY2llcydcbiAgaWYgKGZsYWdzLnNhdmVEZXYpIHJldHVybiAnZGV2RGVwZW5kZW5jaWVzJ1xuICBpZiAoZmxhZ3Muc2F2ZU9wdGlvbmFsKSByZXR1cm4gJ29wdGlvbmFsRGVwZW5kZW5jaWVzJ1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbGxDbWRcbiJdfQ==