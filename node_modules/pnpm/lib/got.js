var Promise = require('./promise');
var debug = require('debug')('pnpm:http');
var assign = require('object-assign');
var throat = require('throat');
var got = require('got');
var config = require('./config');
var HttpAgent = require('http').Agent;
var HttpsAgent = require('https').Agent;
var caw = require('caw');
var getAuthToken = require('registry-auth-token');

var cache = {};

var throater = throat(+config.concurrency);
var httpKeepaliveAgent = new HttpAgent({
  keepAlive: true,
  keepAliveMsecs: 30000
});
var httpsKeepaliveAgent = new HttpsAgent({
  keepAlive: true,
  keepAliveMsecs: 30000
});

/*
 * waits in line
 */

exports.get = function (url, options) {
  var key = JSON.stringify([url, options]);
  if (!cache[key]) {
    cache[key] = new Promise(function (resolve) {
      throater(function (_) {
        debug(url);
        var promise = got(url, extend(url, options));
        resolve({ promise: promise });
        return promise;
      });
    });
  }
  return cache[key];
};

/*
 * like require('got').stream, but throated
 */

exports.getStream = function (url, options) {
  return new Promise(function (resolve) {
    throater(function (_) {
      debug(url, '[stream]');
      var stream = got.stream(url, extend(url, options));
      resolve(stream);
      return waiter(stream);
    });
  });
};

function waiter(stream) {
  return new Promise(function (resolve, reject) {
    stream.on('end', resolve).on('error', reject);
  });
}

/*
 * Extends `got` options with User Agent headers and stuff
 */

function extend(url, options) {
  if (!options) options = {};
  if (url.indexOf('https://') === 0) {
    options.agent = caw() || httpsKeepaliveAgent;

    var authToken = getAuthToken(url, { recursive: true });
    if (authToken) {
      options.headers = assign({}, options.headers || {}, {
        authorization: 'Bearer ' + authToken
      });
    }
  } else {
    options.agent = caw() || httpKeepaliveAgent;
  }
  return assign({}, options, {
    headers: assign({}, options.headers || {}, {
      'user-agent': 'https://github.com/rstacruz/pnpm'
    })
  });
}
//# sourceMappingURL=data:application/json;base64,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QUFDRixHQVRELE1BU087QUFDTCxZQUFRLEtBQVIsR0FBZ0IsU0FBUyxrQkFBekI7QUFDRDtBQUNELFNBQU8sT0FBTyxFQUFQLEVBQVcsT0FBWCxFQUFvQjtBQUN6QixhQUFTLE9BQU8sRUFBUCxFQUFXLFFBQVEsT0FBUixJQUFtQixFQUE5QixFQUFrQztBQUN6QyxvQkFBYztBQUQyQixLQUFsQztBQURnQixHQUFwQixDQUFQO0FBS0QiLCJmaWxlIjoiZ290LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFByb21pc2UgPSByZXF1aXJlKCcuL3Byb21pc2UnKVxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgncG5wbTpodHRwJylcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJylcbnZhciB0aHJvYXQgPSByZXF1aXJlKCd0aHJvYXQnKVxudmFyIGdvdCA9IHJlcXVpcmUoJ2dvdCcpXG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKVxudmFyIEh0dHBBZ2VudCA9IHJlcXVpcmUoJ2h0dHAnKS5BZ2VudFxudmFyIEh0dHBzQWdlbnQgPSByZXF1aXJlKCdodHRwcycpLkFnZW50XG52YXIgY2F3ID0gcmVxdWlyZSgnY2F3JylcbnZhciBnZXRBdXRoVG9rZW4gPSByZXF1aXJlKCdyZWdpc3RyeS1hdXRoLXRva2VuJylcblxudmFyIGNhY2hlID0ge31cblxudmFyIHRocm9hdGVyID0gdGhyb2F0KCtjb25maWcuY29uY3VycmVuY3kpXG52YXIgaHR0cEtlZXBhbGl2ZUFnZW50ID0gbmV3IEh0dHBBZ2VudCh7XG4gIGtlZXBBbGl2ZTogdHJ1ZSxcbiAga2VlcEFsaXZlTXNlY3M6IDMwMDAwXG59KVxudmFyIGh0dHBzS2VlcGFsaXZlQWdlbnQgPSBuZXcgSHR0cHNBZ2VudCh7XG4gIGtlZXBBbGl2ZTogdHJ1ZSxcbiAga2VlcEFsaXZlTXNlY3M6IDMwMDAwXG59KVxuXG4vKlxuICogd2FpdHMgaW4gbGluZVxuICovXG5cbmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICB2YXIga2V5ID0gSlNPTi5zdHJpbmdpZnkoWyB1cmwsIG9wdGlvbnMgXSlcbiAgaWYgKCFjYWNoZVtrZXldKSB7XG4gICAgY2FjaGVba2V5XSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgdGhyb2F0ZXIoXyA9PiB7XG4gICAgICAgIGRlYnVnKHVybClcbiAgICAgICAgdmFyIHByb21pc2UgPSBnb3QodXJsLCBleHRlbmQodXJsLCBvcHRpb25zKSlcbiAgICAgICAgcmVzb2x2ZSh7IHByb21pc2U6IHByb21pc2UgfSlcbiAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICByZXR1cm4gY2FjaGVba2V5XVxufVxuXG4vKlxuICogbGlrZSByZXF1aXJlKCdnb3QnKS5zdHJlYW0sIGJ1dCB0aHJvYXRlZFxuICovXG5cbmV4cG9ydHMuZ2V0U3RyZWFtID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgdGhyb2F0ZXIoXyA9PiB7XG4gICAgICBkZWJ1Zyh1cmwsICdbc3RyZWFtXScpXG4gICAgICB2YXIgc3RyZWFtID0gZ290LnN0cmVhbSh1cmwsIGV4dGVuZCh1cmwsIG9wdGlvbnMpKVxuICAgICAgcmVzb2x2ZShzdHJlYW0pXG4gICAgICByZXR1cm4gd2FpdGVyKHN0cmVhbSlcbiAgICB9KVxuICB9KVxufVxuXG5mdW5jdGlvbiB3YWl0ZXIgKHN0cmVhbSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHN0cmVhbVxuICAgICAgLm9uKCdlbmQnLCByZXNvbHZlKVxuICAgICAgLm9uKCdlcnJvcicsIHJlamVjdClcbiAgfSlcbn1cblxuLypcbiAqIEV4dGVuZHMgYGdvdGAgb3B0aW9ucyB3aXRoIFVzZXIgQWdlbnQgaGVhZGVycyBhbmQgc3R1ZmZcbiAqL1xuXG5mdW5jdGlvbiBleHRlbmQgKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fVxuICBpZiAodXJsLmluZGV4T2YoJ2h0dHBzOi8vJykgPT09IDApIHtcbiAgICBvcHRpb25zLmFnZW50ID0gY2F3KCkgfHwgaHR0cHNLZWVwYWxpdmVBZ2VudFxuXG4gICAgdmFyIGF1dGhUb2tlbiA9IGdldEF1dGhUb2tlbih1cmwsIHtyZWN1cnNpdmU6IHRydWV9KVxuICAgIGlmIChhdXRoVG9rZW4pIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IGFzc2lnbih7fSwgb3B0aW9ucy5oZWFkZXJzIHx8IHt9LCB7XG4gICAgICAgIGF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIGF1dGhUb2tlblxuICAgICAgfSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucy5hZ2VudCA9IGNhdygpIHx8IGh0dHBLZWVwYWxpdmVBZ2VudFxuICB9XG4gIHJldHVybiBhc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICBoZWFkZXJzOiBhc3NpZ24oe30sIG9wdGlvbnMuaGVhZGVycyB8fCB7fSwge1xuICAgICAgJ3VzZXItYWdlbnQnOiAnaHR0cHM6Ly9naXRodWIuY29tL3JzdGFjcnV6L3BucG0nXG4gICAgfSlcbiAgfSlcbn1cbiJdfQ==